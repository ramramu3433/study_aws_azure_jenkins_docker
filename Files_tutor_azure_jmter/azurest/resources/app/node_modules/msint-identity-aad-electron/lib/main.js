/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
/// <reference path="../node_modules/@types/electron/index.d.ts" />
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var electron_1 = require("electron");
var q_1 = require("q");
var promptLoginParameter = "&prompt=login", authWindowsToClose = [];
function getAuthorizationCode(url, redirectUri, silent) {
    return q_1.Promise(function (resolve) {
        var capturedUrl = null, authWindow = new electron_1.BrowserWindow({
            show: !silent,
            width: 568,
            height: 720,
            resizable: false,
            center: true,
            webPreferences: {
                nodeIntegration: false
            }
        });
        authWindow.setMenuBarVisibility(false);
        var index = url.indexOf(promptLoginParameter);
        if (index > 0) {
            // The caller is requesting that a login prompt always be shown.
            // Unfortunately, this is buggy in AAD and they sometimes ask
            // for the password twice. The alternative way to force the prompt
            // to be shown is to clear the browser cookie cache. So, remove
            // the detected query option from the URL and clear the cache.
            url = url.substr(0, index) + url.substr(index + "&prompt=login".length);
            authWindow.webContents.session.clearStorageData({ storages: ["cookies"] }, browseToUrl);
        }
        else {
            browseToUrl();
        }
        function browseToUrl() {
            authWindow.loadURL(url);
            // After loading the initial URL, we need to let the browser run
            // until it encounters the redirect URI. When this happens, the
            // browser window should be automatically closed.
            // There are a number of possible events that seem like they would
            // work for this, but the only one that actually works is the
            // did-get-redirect-request event, which is called before the
            // browser responds to a redirect request.
            authWindow.webContents.on("did-get-redirect-request", onDidGetRedirectRequest);
            authWindow.on("close", onClose);
            function onDidGetRedirectRequest(event, oldUrl, newUrl) {
                if (newUrl.indexOf(redirectUri + "?") === 0) {
                    capturedUrl = newUrl;
                    if (newUrl.toLowerCase().indexOf("urn:") === 0) {
                        // The redirect URI is using the custom "urn" scheme
                        // for which a protocol handler was registered. In this
                        // case, we CANNOT immediately close the auth window,
                        // because Electron then has a race-condition between
                        // closure of the window and calling of the custom
                        // protocol handler that had to be registered to stop
                        // prompting to open a "urn". If the window gets closed
                        // before the protocol handler is called, then Electron
                        // crashes because it is unable to pass the deallocated
                        // window to the handler. The observed behavior of
                        // Electron is that the did-get-redirect-request event
                        // is always raised before the custom protocol handler
                        // is invoked, so we can schedule the window to be
                        // closed by the protocol handler instead.
                        authWindowsToClose.push(authWindow);
                    }
                    else {
                        authWindow.close();
                    }
                }
            }
            function onClose() {
                authWindow = null;
                resolve(capturedUrl);
            }
        }
    });
}
exports.getAuthorizationCode = getAuthorizationCode;
// Handle calls from renderer processes
electron_1.ipcMain.on("getAuthorizationCode", function (event, url, captureUrl, silent, token) {
    getAuthorizationCode(url, captureUrl, silent).then(function (capturedUrl) { return event.sender.send("getAuthorizationCode-reply", token, capturedUrl); });
});
// On Windows, handle requests to select a certificate through
// the selectcert module, which pops the native selection dialog.
if (process.platform === "win32") {
    electron_1.app.on("select-client-certificate", function (event, webContents, host, certificates, callback) {
        if (certificates.length <= 1) {
            // Default behavior is appropriate
            return false;
        }
        event.preventDefault();
        /* tslint:disable no-require-imports */
        var index = require("msint-selectcert").selectCertificate(certificates.map(function (c) { return c.data; }));
        /* tslint:enable */
        if (index >= 0) {
            callback(certificates[index]);
        }
        return true;
    });
}
// Register a custom protocol handler to deal with the "urn" scheme,
// which occurs in cases that the redirect URI is such a scheme.
// Otherwise the default behavior is to attempt a shell execute of
// the URI, which at least on Windows prompts the user to choose an
// application that handles "urn", which is not the desired behavior.
electron_1.app.on("ready", function () {
    electron_1.protocol.registerStringProtocol("urn", function (request, callback) {
        // Close all auth windows that need to be closed
        while (authWindowsToClose.length) {
            authWindowsToClose.shift().close();
        }
        // Doesn't matter how the protocol is handled; error is fine
        callback();
    });
});

//# sourceMappingURL=data:application/json;base64,
