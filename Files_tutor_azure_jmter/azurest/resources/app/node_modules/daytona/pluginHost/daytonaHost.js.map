{"version":3,"sources":["../pluginHost/daytonaHost.ts"],"names":[],"mappings":"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","file":"daytonaHost.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n\"use strict\";\r\nimport { Promise } from 'q'\r\n\r\nimport {ScriptedControl} from \"./scriptedControl\";\r\nimport {IThemeProvider} from \"./interfaces/iThemeProvider\";\r\nimport {IFileProvider} from \"./interfaces/iFileProvider\";\r\nimport {ILogProvider} from \"./interfaces/iLogProvider\";\r\nimport {IResourcesProvider} from \"./interfaces/iResourcesProvider\";\r\nimport {ICommandsProvider} from \"./interfaces/iCommandsProvider\";\r\nimport {ISettingsProvider} from \"./interfaces/iSettingsProvider\";\r\nimport {IStorageProvider} from \"./interfaces/iStorageProvider\";\r\nimport {IContextMenuProvider} from \"./interfaces/iContextMenuProvider\";\r\nimport {ITooltipProvider} from \"./interfaces/iTooltipProvider\";\r\nimport {IHostProvider} from \"./interfaces/iHostProvider\";\r\nimport {IHostLibraryProviders} from \"./interfaces/iHostLibraryProviders\";\r\nimport {IJSONManifest} from \"./common/iJSONManifest\";\r\nimport {EventTarget, Event} from \"./common/event\";\r\nimport {JsonPortMarshaler} from \"./messaging/marshaler\";\r\nimport * as Path from \"path\";\r\n\r\nexport class DaytonaHost extends EventTarget {\r\n    protected fileProvider: IFileProvider;\r\n    protected logProvider: ILogProvider;\r\n    protected resourcesProvider: IResourcesProvider;\r\n    protected themeProvider: IThemeProvider;\r\n\r\n    protected control: ScriptedControl;\r\n    protected parent: HTMLElement;\r\n\r\n    private hostName: string;\r\n    private manifestFile: string;\r\n    private manifestContent: any;\r\n    private baseDirectory: string;\r\n    private marshalers: { name: string, object: JsonPortMarshaler }[] = [];\r\n\r\n    protected defaultTheme: string;\r\n    protected defaultCulture: string;\r\n    protected themeBaseDirectory: string;\r\n    private parameters: { [name: string]: string };\r\n\r\n    constructor(hostName: string, parent: HTMLElement, manifestFile: string, baseDirectory: string, defaultTheme: string, defaultCulture: string, themeBaseDirectory: string, parameters: { [name: string]: string }) {\r\n        super();\r\n        if (typeof manifestFile !== 'string' || manifestFile.length <= 0) {\r\n            throw new Error('Invalid file name');\r\n        }\r\n\r\n        this.hostName = hostName;\r\n        this.parent = parent;\r\n        this.manifestFile = manifestFile;\r\n        this.baseDirectory = baseDirectory;\r\n        this.defaultTheme = defaultTheme;\r\n        this.defaultCulture = defaultCulture;\r\n        this.themeBaseDirectory = themeBaseDirectory;\r\n        this.parameters = parameters;\r\n\r\n        // Initialize the providers\r\n        this.fileProvider = this.getFileProvider();\r\n        this.logProvider = this.getLogProvider();\r\n        this.resourcesProvider = this.getResourcesProvider();\r\n        this.themeProvider = this.getThemeProvider();\r\n    }\r\n\r\n    public initialize(initInSeparateProcess: boolean = false): Promise<void> {\r\n        // Load the manifest file\r\n        return this.getJSONFile<IJSONManifest>(this.manifestFile).then(\r\n            (manifest) => {\r\n                this.manifestContent = manifest;\r\n\r\n                var commandProvider = this.getCommandsProvider(this.manifestContent);\r\n                var settingsProvider = this.getSettingsProvider();\r\n                var contextMenuProvider = this.getContextMenuProvider();\r\n                var storageProvider = this.getStorageProvider();\r\n                var hostProvider = this.getHostProvider();\r\n                var tooltipProvider = this.getTooltipProvider();\r\n                var providers: IHostLibraryProviders = {\r\n                    commandsProvider: commandProvider,\r\n                    contextMenuProvider: contextMenuProvider,\r\n                    logProvider: this.logProvider,\r\n                    resourcesProvider: this.resourcesProvider,\r\n                    settingsProvider: settingsProvider,\r\n                    storageProvider: storageProvider,\r\n                    themeProvider: this.themeProvider,\r\n                    fileProvider: this.fileProvider,\r\n                    hostProvider:hostProvider,\r\n                    tooltipProvider: tooltipProvider\r\n                };\r\n                // Create the control\r\n                this.control = new ScriptedControl(this.hostName, this.manifestContent, this.baseDirectory, this.parameters, initInSeparateProcess, providers);\r\n                this.control.addEventListener('ControlClosed', () => this.close());\r\n\r\n                // Type as any to give access to private iframe field\r\n                var controlWithPrivateAccess = <any>this.control;\r\n\r\n                // Apply style to the control iframe\r\n                controlWithPrivateAccess.iframe.width = '100%';\r\n                controlWithPrivateAccess.iframe.height = '100%';\r\n                controlWithPrivateAccess.iframe.style.border = '0px';\r\n\r\n                // Append the control iframe to the parent container\r\n                this.parent.appendChild(controlWithPrivateAccess.iframe);\r\n\r\n                // Process host specific configurations\r\n                this.loadHostExtensions(this.manifestContent);\r\n            }).catch((error) => {\r\n                this.reportError('Failed to load manifest file: ' + this.manifestFile);\r\n            });\r\n    }\r\n\r\n    public close(): void {\r\n        var control = this.control;\r\n        if (control) {\r\n            this.control = null;\r\n            control.close();\r\n            this.dispatchEvent('HostClosed', new Event());\r\n        }\r\n    }\r\n\r\n    public addMarshaler(name: string, object: JsonPortMarshaler | any) {\r\n        this.marshalers.push({\r\n            name: name,\r\n            object: object instanceof JsonPortMarshaler ?\r\n                object :\r\n                new JsonPortMarshaler(object)\r\n        });\r\n    }\r\n\r\n    protected getFileProvider(): IFileProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected getLogProvider(): ILogProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected getResourcesProvider(): IResourcesProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected getThemeProvider(): IThemeProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected getCommandsProvider(manifest: IJSONManifest): ICommandsProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected getSettingsProvider(): ISettingsProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected getContextMenuProvider(): IContextMenuProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n    \r\n    protected getStorageProvider(): IStorageProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n    \r\n    protected getHostProvider(): IHostProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n    \r\n    protected getTooltipProvider(): ITooltipProvider {\r\n        // This is the default behavior of getting provider. \r\n        // Subclass should override this method to provider its own provider.\r\n        return null;\r\n    }\r\n\r\n    protected loadHostExtensions(manifest: any): void {\r\n        var hostConfig = manifest['webhost'];\r\n        if (hostConfig) {\r\n            var publishedObjects = hostConfig['published_objects'];\r\n            if (publishedObjects) {\r\n                for (var alias in publishedObjects) {\r\n                    var publishedObject = publishedObjects[alias];\r\n                    if (publishedObject && publishedObject['path'] && publishedObject['marshaler_class_name']) {\r\n                        this.initPublishedObject(alias, publishedObject);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.marshalers.forEach((marshaler) => {\r\n            this.control.publishObject(\r\n                marshaler.name,\r\n                marshaler.object\r\n            );\r\n        });\r\n    }\r\n\r\n    private initPublishedObject(alias: string, publishedObject: any): void {\r\n        // Read the file contents\r\n        var publishedObjectFilePath = this.baseDirectory + publishedObject['path'];\r\n        this.fileProvider.getFileContents(publishedObjectFilePath).then(\r\n            (contents) => {\r\n                // Eval the file\r\n                try {\r\n                    eval(contents);\r\n                }\r\n                catch (ex) {\r\n                    this.reportError('Invalid host extension at: ' + publishedObject['path']);\r\n                    return;\r\n                }\r\n\r\n                // Find the marshaler providor\r\n                var marshalerProvidor: any;\r\n                try {\r\n                    marshalerProvidor = eval(publishedObject['marshaler_class_name']);\r\n                }\r\n                catch (ex) {\r\n                    this.reportError('Invalid marshaler class name: ' + publishedObject['marshaler_class_name']);\r\n                    return;\r\n                }\r\n\r\n                if (!marshalerProvidor || typeof marshalerProvidor.getMarshaler !== 'function') {\r\n                    this.reportError('Invalid marshaler: ' + publishedObject['marshaler_class_name']);\r\n                    return;\r\n                }\r\n\r\n                // Register the marshaler\r\n                this.control.publishObject(\r\n                    alias,\r\n                    marshalerProvidor.getMarshaler(this.control)\r\n                );\r\n            },\r\n            (error) => {\r\n                this.reportError('Failed to load publishedObject definition file: ' + publishedObjectFilePath);\r\n            });\r\n    }\r\n\r\n    private reportError(message: string): void {\r\n        this.logProvider.logError('Host Error: ' + message);\r\n    }\r\n\r\n    private getJSONFile<T>(fileName: string): Promise<T> {\r\n        return this.fileProvider.getFileContents(fileName).then((contents) => JSON.parse(contents));\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}