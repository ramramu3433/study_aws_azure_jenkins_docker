import { Promise } from 'q';
import { ScriptedControl } from "./scriptedControl";
import { IThemeProvider } from "./interfaces/iThemeProvider";
import { IFileProvider } from "./interfaces/iFileProvider";
import { ILogProvider } from "./interfaces/iLogProvider";
import { IResourcesProvider } from "./interfaces/iResourcesProvider";
import { ICommandsProvider } from "./interfaces/iCommandsProvider";
import { ISettingsProvider } from "./interfaces/iSettingsProvider";
import { IStorageProvider } from "./interfaces/iStorageProvider";
import { IContextMenuProvider } from "./interfaces/iContextMenuProvider";
import { ITooltipProvider } from "./interfaces/iTooltipProvider";
import { IHostProvider } from "./interfaces/iHostProvider";
import { IJSONManifest } from "./common/iJSONManifest";
import { EventTarget } from "./common/event";
import { JsonPortMarshaler } from "./messaging/marshaler";
export declare class DaytonaHost extends EventTarget {
    protected fileProvider: IFileProvider;
    protected logProvider: ILogProvider;
    protected resourcesProvider: IResourcesProvider;
    protected themeProvider: IThemeProvider;
    protected control: ScriptedControl;
    protected parent: HTMLElement;
    private hostName;
    private manifestFile;
    private manifestContent;
    private baseDirectory;
    private marshalers;
    protected defaultTheme: string;
    protected defaultCulture: string;
    protected themeBaseDirectory: string;
    private parameters;
    constructor(hostName: string, parent: HTMLElement, manifestFile: string, baseDirectory: string, defaultTheme: string, defaultCulture: string, themeBaseDirectory: string, parameters: {
        [name: string]: string;
    });
    initialize(initInSeparateProcess?: boolean): Promise<void>;
    close(): void;
    addMarshaler(name: string, object: JsonPortMarshaler | any): void;
    protected getFileProvider(): IFileProvider;
    protected getLogProvider(): ILogProvider;
    protected getResourcesProvider(): IResourcesProvider;
    protected getThemeProvider(): IThemeProvider;
    protected getCommandsProvider(manifest: IJSONManifest): ICommandsProvider;
    protected getSettingsProvider(): ISettingsProvider;
    protected getContextMenuProvider(): IContextMenuProvider;
    protected getStorageProvider(): IStorageProvider;
    protected getHostProvider(): IHostProvider;
    protected getTooltipProvider(): ITooltipProvider;
    protected loadHostExtensions(manifest: any): void;
    private initPublishedObject(alias, publishedObject);
    private reportError(message);
    private getJSONFile<T>(fileName);
}
