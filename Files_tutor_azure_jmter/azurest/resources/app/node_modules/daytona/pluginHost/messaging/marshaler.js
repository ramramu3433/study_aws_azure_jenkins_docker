/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var event_1 = require("../common/event");
var q_1 = require("q");
var PortMarshaler = (function (_super) {
    __extends(PortMarshaler, _super);
    function PortMarshaler() {
        return _super.call(this) || this;
    }
    PortMarshaler.prototype.initialize = function (newPort) {
        if (!newPort) {
            throw new Error('Invalid port');
        }
        this.port = newPort;
        this.port.addEventListener('message', this.onMessage.bind(this));
        this.port.addEventListener('connected', this.onConnected.bind(this));
    };
    PortMarshaler.prototype.onMessage = function (source, eventArgs) {
        try {
            var result = this.messageReceived(eventArgs.message);
            if (eventArgs.replyRequested) {
                if (result && q_1.Promise.prototype.isPrototypeOf(result)) {
                    result.done(function (promiseResult) {
                        eventArgs.reply(promiseResult);
                    }, function (error) {
                        eventArgs.reportError(error);
                    });
                }
                else {
                    eventArgs.reply(result);
                }
            }
        }
        catch (ex) {
            if (eventArgs.replyRequested) {
                eventArgs.reportError(ex);
            }
        }
    };
    PortMarshaler.prototype.onConnected = function (source, eventArgs) {
        if (!this.instanceInitialized) {
            this.initializeMarshaler();
            this.instanceInitialized = true;
        }
        this.dispatchEvent('PortConnected', new event_1.Event());
    };
    PortMarshaler.prototype.messageReceived = function (message) {
        return null;
    };
    PortMarshaler.prototype.initializeMarshaler = function () {
        // implemented in subclasses
    };
    PortMarshaler.prototype.postMessage = function (message) {
        this.port.postMessage(message);
    };
    PortMarshaler.prototype.closePort = function () {
        if (this.port) {
            this.port.removeEventListener('message', this.onMessage);
            this.port.removeEventListener('connected', this.onConnected);
            this.port.close();
        }
    };
    PortMarshaler.prototype.dispose = function () {
        this.closePort();
    };
    return PortMarshaler;
}(event_1.EventTarget));
exports.PortMarshaler = PortMarshaler;
var JsonPortMarshaler = (function (_super) {
    __extends(JsonPortMarshaler, _super);
    function JsonPortMarshaler(objDefinition) {
        var _this = _super.call(this) || this;
        if (objDefinition && typeof objDefinition === 'object') {
            Object.getOwnPropertyNames(objDefinition).forEach(function (name) {
                var pd = Object.getOwnPropertyDescriptor(objDefinition, name);
                Object.defineProperty(_this, name, pd);
            });
        }
        return _this;
    }
    JsonPortMarshaler.prototype.onMessage = function (source, eventArgs) {
        try {
            var message = eventArgs.message;
            var request = JSON.parse(message);
            var methodName = request.method;
            var method = this[methodName];
            if (typeof method === 'function') {
                var callResult = method.apply(this, request.args);
                if (eventArgs.replyRequested) {
                    if (callResult && typeof callResult.then === 'function') {
                        callResult.then(function (promiseResult) {
                            var result = {
                                result: promiseResult || ''
                            };
                            eventArgs.reply(JSON.stringify(result));
                        }, function (error) {
                            eventArgs.reportError(error);
                        });
                    }
                    else {
                        var result = {
                            result: callResult || ''
                        };
                        eventArgs.reply(JSON.stringify(result));
                    }
                }
            }
            else {
                throw new Error('Unknown method: ' + methodName);
            }
        }
        catch (ex) {
            if (eventArgs.replyRequested) {
                eventArgs.reportError(ex);
            }
        }
    };
    JsonPortMarshaler.prototype.messageReceived = function (message) {
        var request = JSON.parse(message);
        var methodName = request.method;
        var method = this[methodName];
        if (typeof method === 'function') {
            var callResult = method.apply(this, request.args);
            var result = {
                result: callResult || ''
            };
            return JSON.stringify(result);
        }
        throw new Error('Unknown method: ' + methodName);
    };
    JsonPortMarshaler.prototype.fireEvent = function (eventName, eventArgs) {
        var response = {
            eventName: eventName,
            arg: eventArgs
        };
        this.postMessage(JSON.stringify(response));
    };
    return JsonPortMarshaler;
}(PortMarshaler));
exports.JsonPortMarshaler = JsonPortMarshaler;
var SynchronousJsonPortMarshaler = (function (_super) {
    __extends(SynchronousJsonPortMarshaler, _super);
    function SynchronousJsonPortMarshaler(control) {
        var _this = _super.call(this) || this;
        control.addEventListener('BeforeControlReady', function (source, eventArgs) {
            if (_this.connectFired) {
                _this.connectFired = false;
            }
            else {
                _this.delayControlReadyToken = eventArgs.delayControlReadyEvent();
            }
        });
        _this.addEventListener('PortConnected', function (source, eventArgs) {
            _this.initializeState();
            if (_this.delayControlReadyToken) {
                _this.delayControlReadyToken.unblockControlReadyEvent();
                _this.delayControlReadyToken = null;
            }
            else {
                _this.connectFired = true;
            }
        });
        return _this;
    }
    SynchronousJsonPortMarshaler.prototype.initializeState = function () {
        // implemented in subclasses
    };
    return SynchronousJsonPortMarshaler;
}(JsonPortMarshaler));
exports.SynchronousJsonPortMarshaler = SynchronousJsonPortMarshaler;

//# sourceMappingURL=../messaging/marshaler.js.map
// SIG // Begin signature block
// SIG // MIIaogYJKoZIhvcNAQcCoIIakzCCGo8CAQExCzAJBgUr
// SIG // DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
// SIG // gjcCAR4wJAIBAQQQEODJBs441BGiowAQS9NQkAIBAAIB
// SIG // AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFMLZGPWM8Wjg
// SIG // asIcoVAnzs16WKCLoIIVgzCCBMMwggOroAMCAQICEzMA
// SIG // AADMy7gT611yLUUAAAAAAMwwDQYJKoZIhvcNAQEFBQAw
// SIG // dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE2MDkwNzE3
// SIG // NTg1NloXDTE4MDkwNzE3NTg1NlowgbMxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgRFNFIEVTTjoxNDhDLUM0QjktMjA2NjEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAMHuW6dDx+zWqy3lA36tRPiXeFjaRptpIBFcyxpj
// SIG // gIzC/sOUVxM0DkLqk5fEnzFHK4NfraNiIW7t4XzxRUUC
// SIG // atHDx/4teF9cNHFj+o0asgKr/095UjODt3Q0jWSvkFLF
// SIG // KtMl3hfhZr1tIoAR1KTqVxMsR4WtEDc2yZvYsgl0rv1m
// SIG // lLLYHKvMBwNoL7i3b0gOqQ7fgIAFH9KP39jcJduR7ZQz
// SIG // UYiNT4H0kXcPltIJ0mpZN8cnKw1RQ5VS2rz3HMFzXNGL
// SIG // Dayha/U9e22s98WD02//vdDbaVKAYEnaVdka+3r+5fNO
// SIG // pc+JpcRBKhb/8cJO2MLOAaMLVPaRNc2j8jYldhkCAwEA
// SIG // AaOCAQkwggEFMB0GA1UdDgQWBBT1oZpm1ZHnT2WvrNkU
// SIG // AJ2XQpvPqjAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
// SIG // syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
// SIG // AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
// SIG // ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
// SIG // AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQCWgS2KG/en
// SIG // HI77XEalJf+dfokOk1+FqCQmG/o397DLYEC3eJCz6Qgf
// SIG // 9n/LrmXj3/cEnYwrtkjxbdT8erycrF5Nge60XmEdwPBt
// SIG // ErKFL/5wnRY6d3ba95ZtsZDFNsL+TseATuCX/tL0/frN
// SIG // z2y5z2Svxo1CdYnVkhtLCqV4Ku5qUsPUle4yI43TNG7q
// SIG // QXdsSwin6HMY2Iq+VGCVogvAtJG//+hfPyS/59Rq9U8u
// SIG // 5mXYhY1uBQRCMU1N69BJwKrTr/ztHAKS7gvQFdaRYsZR
// SIG // oEEapQP8UUCy2rot4+ahiniXoo2Es0SYE2OS9tSG27le
// SIG // mqyK2YaSZC9OfUKICgRYI5oiMIIE7TCCA9WgAwIBAgIT
// SIG // MwAAAUCWqe5wVv7MBwABAAABQDANBgkqhkiG9w0BAQUF
// SIG // ADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpN
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xNjA4
// SIG // MTgyMDE3MTdaFw0xNzExMDIyMDE3MTdaMIGDMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYD
// SIG // VQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0G
// SIG // CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbS4vpA2pf
// SIG // yBtdCgU55NUOktDE4YvopA0FGVjAPNcp3Ym3aG5Ln368
// SIG // mr1Uhjmp8Tg1FuYdrPuua9wJMO+4Ht9s+EqaVZdIyCOJ
// SIG // s1knNL2VMUecD85ANTI3/unzT6QapLN5vICbPySYxNFv
// SIG // 1X/nQ43k3PLS5q5m7QQ6IZSmV9wD2yzGG/8rOahdv1X+
// SIG // 3UnfVAWUqzPfpH0xpk29Vs8WMWg/hGscbfPu1TCK7mUb
// SIG // nrcIHCl+k73yfUJ2OCLUe3z0uLlxnsOU9IKGNYKmdL0C
// SIG // M/pUhoWjJb6qiV7iOV8mQZga3rnmRoV4u1EyAkfs5Pkf
// SIG // vQRRdeYSm3brhZcUIgqhE/dhAgMBAAGjggFhMIIBXTAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUnOXo
// SIG // bYJXrjck3upeqcRfkB3O2XswUgYDVR0RBEswSaRHMEUx
// SIG // DTALBgNVBAsTBE1PUFIxNDAyBgNVBAUTKzIyOTgwMytm
// SIG // Nzg1YjFjMC01ZDlmLTQzMTYtOGQ2YS03NGFlNjQyZGRl
// SIG // MWMwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUya
// SIG // Ch8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWlj
// SIG // Q29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUF
// SIG // BwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQ
// SIG // Q0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQAD
// SIG // ggEBAGvkVuPXEx0gQPlt6d5O210exmwmo/flCYAM/1fh
// SIG // tNTZ+VxI4QZ/wqRUuJZ69Y3JgxMMcb/4/LsuzBVz8wBr
// SIG // TiWq9MQKcpRSn3dNKZMoCDEW2d9udKvE6E4VsZkFRE4a
// SIG // SUksrHnuv4VPhG5H777Y0otJaQ4pg/WlvaMbIa2ipT6Q
// SIG // IJz1nxI9ell1ZO/ao4WEMhICAmpkdwGmOZiz7qIoSWys
// SIG // JDIoPqiLZiz7AtiDLyOSkfdXZf+k1elRCJT21v3A1cAg
// SIG // Rf1DSU957mQZf2BO4sTKU04f+1qRDVvNJIN8c+jJQncS
// SIG // XzEmybDOU4phVPfCjXKZ8cW2HX6qkIQEOpd5rWAwggW8
// SIG // MIIDpKADAgECAgphMyYaAAAAAAAxMA0GCSqGSIb3DQEB
// SIG // BQUAMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJ
// SIG // kiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1p
// SIG // Y3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0
// SIG // eTAeFw0xMDA4MzEyMjE5MzJaFw0yMDA4MzEyMjI5MzJa
// SIG // MHkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xIzAhBgNVBAMTGk1p
// SIG // Y3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBMIIBIjANBgkq
// SIG // hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsnJZXBkwZL8d
// SIG // mmAgIEKZdlNsPhvWb8zL8epr/pcWEODfOnSDGrcvoDLs
// SIG // /97CQk4j1XIA2zVXConKriBJ9PBorE1LjaW9eUtxm0cH
// SIG // 2v0l3511iM+qc0R/14Hb873yNqTJXEXcr6094Cholxqn
// SIG // pXJzVvEXlOT9NZRyoNZ2Xx53RYOFOBbQc1sFumdSjaWy
// SIG // aS/aGQv+knQp4nYvVN0UMFn40o1i/cvJX0YxULknE+RA
// SIG // MM9yKRAoIsc3Tj2gMj2QzaE4BoVcTlaCKCoFMrdL109j
// SIG // 59ItYvFFPeesCAD2RqGe0VuMJlPoeqpK8kbPNzw4nrR3
// SIG // XKUXno3LEY9WPMGsCV8D0wIDAQABo4IBXjCCAVowDwYD
// SIG // VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUyxHoytK0FlgB
// SIG // yTcuMxYWuUyaCh8wCwYDVR0PBAQDAgGGMBIGCSsGAQQB
// SIG // gjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYEFP3RMU7T
// SIG // JoqV4ZhgO6gxb6Y8vNgtMBkGCSsGAQQBgjcUAgQMHgoA
// SIG // UwB1AGIAQwBBMB8GA1UdIwQYMBaAFA6sgmBAVieX5SUT
// SIG // /CrhClOVWeSkMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL21pY3Jvc29mdHJvb3RjZXJ0LmNybDBUBggrBgEF
// SIG // BQcBAQRIMEYwRAYIKwYBBQUHMAKGOGh0dHA6Ly93d3cu
// SIG // bWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljcm9zb2Z0
// SIG // Um9vdENlcnQuY3J0MA0GCSqGSIb3DQEBBQUAA4ICAQBZ
// SIG // OT5/Jkav629AsTK1ausOL26oSffrX3XtTDst10OtC/7L
// SIG // 6S0xoyPMfFCYgCFdrD0vTLqiqFac43C7uLT4ebVJcvc+
// SIG // 6kF/yuEMF2nLpZwgLfoLUMRWzS3jStK8cOeoDaIDpVbg
// SIG // uIpLV/KVQpzx8+/u44YfNDy4VprwUyOFKqSCHJPilAcd
// SIG // 8uJO+IyhyugTpZFOyBvSj3KVKnFtmxr4HPBT1mfMIv9c
// SIG // Hc2ijL0nsnljVkSiUc356aNYVt2bAkVEL1/02q7UgjJu
// SIG // /KSVE+Traeepoiy+yCsQDmWOmdv1ovoSJgllOJTxeh9K
// SIG // u9HhVujQeJYYXMk1Fl/dkx1Jji2+rTREHO4QFRoAXd01
// SIG // WyHOmMcJ7oUOjE9tDhNOPXwpSJxy0fNsysHscKNXkld9
// SIG // lI2gG0gDWvfPo2cKdKU27S0vF8jmcjcS9G+xPGeC+VKy
// SIG // jTMWZR4Oit0Q3mT0b85G1NMX6XnEBLTT+yzfH4qerAr7
// SIG // EydAreT54al/RrsHYEdlYEBOsELsTu2zdnnYCjQJbRyA
// SIG // MR/iDlTd5aH75UcQrWSY/1AWLny/BSF64pVBJ2nDk4+V
// SIG // yY3YmyGuDVyc8KKuhmiDDGotu3ZrAB2WrfIWe/YWgyS5
// SIG // iM9qqEcxL5rc43E91wB+YkfRzojJuBj6DnKNwaM9rwJA
// SIG // av9pm5biEKgQtDdQCNbDPTCCBgcwggPvoAMCAQICCmEW
// SIG // aDQAAAAAABwwDQYJKoZIhvcNAQEFBQAwXzETMBEGCgmS
// SIG // JomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1p
// SIG // Y3Jvc29mdDEtMCsGA1UEAxMkTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5MB4XDTA3MDQwMzEy
// SIG // NTMwOVoXDTIxMDQwMzEzMDMwOVowdzELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
// SIG // MIIBCgKCAQEAn6Fssd/bSJIqfGsuGeG94uPFmVEjUK3O
// SIG // 3RhOJA/u0afRTK10MCAR6wfVVJUVSZQbQpKumFwwJtoA
// SIG // a+h7veyJBw/3DgSY8InMH8szJIed8vRnHCz8e+eIHern
// SIG // TqOhwSNTyo36Rc8J0F6v0LBCBKL5pmyTZ9co3EZTsIbQ
// SIG // 5ShGLieshk9VUgzkAyz7apCQMG6H81kwnfp+1pez6CGX
// SIG // fvjSE/MIt1NtUrRFkJ9IAEpHZhEnKWaol+TTBoFKovmE
// SIG // pxFHFAmCn4TtVXj+AZodUAiFABAwRu233iNGu8QtVJ+v
// SIG // HnhBMXfMm987g5OhYQK1HQ2x/PebsgHOIktU//kFw8Ig
// SIG // CwIDAQABo4IBqzCCAacwDwYDVR0TAQH/BAUwAwEB/zAd
// SIG // BgNVHQ4EFgQUIzT42VJGcArtQPt2+7MrsMM1sw8wCwYD
// SIG // VR0PBAQDAgGGMBAGCSsGAQQBgjcVAQQDAgEAMIGYBgNV
// SIG // HSMEgZAwgY2AFA6sgmBAVieX5SUT/CrhClOVWeSkoWOk
// SIG // YTBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZIm
// SIG // iZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNy
// SIG // b3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHmC
// SIG // EHmtFqFKoKWtTHNY9AcTLmUwUAYDVR0fBEkwRzBFoEOg
// SIG // QYY/aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9j
// SIG // cmwvcHJvZHVjdHMvbWljcm9zb2Z0cm9vdGNlcnQuY3Js
// SIG // MFQGCCsGAQUFBwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9N
// SIG // aWNyb3NvZnRSb290Q2VydC5jcnQwEwYDVR0lBAwwCgYI
// SIG // KwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggIBABCXisNc
// SIG // A0Q23em0rXfbznlRTQGxLnRxW20ME6vOvnuPuC7UEqKM
// SIG // bWK4VwLLTiATUJndekDiV7uvWJoc4R0Bhqy7ePKL0Ow7
// SIG // Ae7ivo8KBciNSOLwUxXdT6uS5OeNatWAweaU8gYvhQPp
// SIG // kSokInD79vzkeJkuDfcH4nC8GE6djmsKcpW4oTmcZy3F
// SIG // UQ7qYlw/FpiLID/iBxoy+cwxSnYxPStyC8jqcD3/hQoT
// SIG // 38IKYY7w17gX606Lf8U1K16jv+u8fQtCe9RTciHuMMq7
// SIG // eGVcWwEXChQO0toUmPU8uWZYsy0v5/mFhsxRVuidcJRs
// SIG // rDlM1PZ5v6oYemIp76KbKTQGdxpiyT0ebR+C8AvHLLvP
// SIG // Q7Pl+ex9teOkqHQ1uE7FcSMSJnYLPFKMcVpGQxS8s7Ow
// SIG // TWfIn0L/gHkhgJ4VMGboQhJeGsieIiHQQ+kr6bv0SMws
// SIG // 1NgygEwmKkgkX1rqVu+m3pmdyjpvvYEndAYR7nYhv5uC
// SIG // wSdUtrFqPYmhdmG0bqETpr+qR/ASb/2KMmyy/t9RyIwj
// SIG // yWa9nR2HEmQCPS2vWY+45CHltbDKY7R4VAXUQS5QrJSw
// SIG // pXirs6CWdRrZkocTdSIvMqgIbqBbjCW/oO+EyiHW6x5P
// SIG // yZruSeD3AWVviQt9yGnI5m7qp5fOMSn/DsVbXNhNG6HY
// SIG // +i+ePy5VFmvJE6P9MYIEizCCBIcCAQEwgZAweTELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0ECEzMAAAFAlqnucFb+zAcA
// SIG // AQAAAUAwCQYFKw4DAhoFAKCBpDAZBgkqhkiG9w0BCQMx
// SIG // DAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYK
// SIG // KwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQUmkbcNxvX
// SIG // mouhNdfdXnk8EE/sVG8wRAYKKwYBBAGCNwIBDDE2MDSg
// SIG // GoAYAG0AYQByAHMAaABhAGwAZQByAC4AagBzoRaAFGh0
// SIG // dHA6Ly9taWNyb3NvZnQuY29tMA0GCSqGSIb3DQEBAQUA
// SIG // BIIBANhLViR4bvRMi3ozpTcsu2Y8wOQCY/GlmIWQth6j
// SIG // N+RwnPf6SMbM8xtBg9611F26Lwm6wze+drZqXQ1Bb+R8
// SIG // 01OujTnjlQVJyeq0LY/b7K6EwI9uZgbGU7/fJeDpqJ3T
// SIG // JRhTbpcZvFJ44sFpAl0lsXTac+Anrbz4d14Xed+9xFyx
// SIG // IGb1i4NHSP9dcQwHa3afSeUv2pF7S17Oz2WdG8KjZvUX
// SIG // 0xA5BJw8q1VEmVA9KE7MQ1on8ijwSW2ZpGkletxYl/5n
// SIG // pFKVBNObEWiiqaKQ10XlRAht3FSH5Vvnly6AktOJWEGh
// SIG // EPa27GPsZWMm2L8+gxjKs3NpT/LZiQyA5pZKXHGhggIo
// SIG // MIICJAYJKoZIhvcNAQkGMYICFTCCAhECAQEwgY4wdzEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgUENBAhMzAAAAzMu4E+tdci1F
// SIG // AAAAAADMMAkGBSsOAwIaBQCgXTAYBgkqhkiG9w0BCQMx
// SIG // CwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA2
// SIG // MTIyMjU0NTZaMCMGCSqGSIb3DQEJBDEWBBTtwHygykUj
// SIG // 6s3bB5WStsnqdb04YzANBgkqhkiG9w0BAQUFAASCAQAk
// SIG // 7aIK0gZk906j8SaOavsk7yjzMnTa+YBJEOwmawBsJXoa
// SIG // zSFH2zMTxihyx+WgrTXnQWoUqZZOKDD1Ele47ymGBlTL
// SIG // mJycBnkSrYrzFCmIsq+3cHTW2dEtpaK7V7hGKiucFqJd
// SIG // yWc970ukpOYA5xcmsf9nhGbsAUXoKpMPqYdEa+j0UXeV
// SIG // Ljgfl84e6wkm+vf5KoDpXtjQj86dBBQO99SGJRu/5avN
// SIG // Op3fLCBFW0KcxiYM+zidHnie18cJa90bEiXGoxjcYzYw
// SIG // Mtslrkp5mUlrPz2UIT+MMCd7mIV3WdG0xbJL789pxw4j
// SIG // KWaSv45Fs9jLa385Xl1OEhgZUsuwvl8A
// SIG // End signature block
