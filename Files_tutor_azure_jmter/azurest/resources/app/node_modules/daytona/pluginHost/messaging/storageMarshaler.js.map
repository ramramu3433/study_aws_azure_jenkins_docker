{"version":3,"sources":["../pluginHost/messaging/storageMarshaler.ts"],"names":[],"mappings":"AAAA;;4DAE4D;AAC3D,YAAY,CAAC;;;;;;;;;;;;AAEd,yCAAyD;AAUzD;IAAsC,oCAA4B;IAG9D,0BAAY,OAAoB,EAAE,OAAyB;QAA3D,YACI,kBAAM,OAAO,CAAC,SAEjB;QADG,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IAC3B,CAAC;IAEM,gCAAK,GAAZ,UAAa,QAAgB;QACzB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEM,qCAAU,GAAjB,UAAkB,IAAoB,EAAE,aAAgC,EAAE,WAAwB;QAC9F,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;IACrE,CAAC;IAEM,sCAAW,GAAlB,UAAmB,IAAa,EAAE,WAA6B,EAAE,KAAc,EAAE,KAAc;QAC3F,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACrE,CAAC;IAEM,mCAAQ,GAAf,UAAgB,IAAa,EAAE,OAAqB;QAChD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;IAEM,+BAAI,GAAX,UAAY,QAAgB,EAAE,MAAc,EAAE,MAAkB;QAC5D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;IAEM,qCAAU,GAAjB,UAAkB,QAAgB,EAAE,KAAa;QAC7C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,mCAAQ,GAAf,UAAgB,QAAgB,EAAE,KAAa;QAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,sCAAW,GAAlB,UAAmB,QAAgB,EAAE,IAAS,EAAE,MAAc,EAAE,KAAa;QACzE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC;IAEM,oCAAS,GAAhB,UAAiB,QAAgB,EAAE,IAAS,EAAE,MAAc,EAAE,KAAa;QACvE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACjE,CAAC;IAEM,oCAAS,GAAhB,UAAiB,MAAY,EAAE,UAAgC;QAC3D,MAAM,CAAC,iBAAM,SAAS,YAAC,MAAM,EAAE,UAAU,CAAC,CAAA;IAC9C,CAAC;IACL,uBAAC;AAAD,CA/CA,AA+CC,CA/CqC,wCAA4B,GA+CjE;AA/CY,4CAAgB","file":"messaging/storageMarshaler.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n \"use strict\";\r\nimport {EventTarget} from \"../common/event\";\r\nimport {SynchronousJsonPortMarshaler} from \"./marshaler\";\r\nimport {IStorageProvider} from \"../interfaces/iStorageProvider\";\r\nimport {Port, PortMessageEventArgs} from \"./communication\";\r\nimport {FileDialogMode, FileDialogOptions} from \"../common/fileDialogOptions\";\r\nimport {FilePersistence, FileOptions} from \"../common/fileOptions\";\r\nimport {SeekOrigin} from \"../common/seekOrigin\";\r\n\r\nimport * as Q from \"q\";\r\nimport {Promise} from \"q\";\r\n\r\nexport class StorageMarshaler extends SynchronousJsonPortMarshaler {\r\n    public storage: IStorageProvider;\r\n\r\n    constructor(control: EventTarget, storage: IStorageProvider) {\r\n        super(control);\r\n        this.storage = storage;\r\n    }\r\n\r\n    public close(streamId: string): void {\r\n        this.storage.close(streamId);\r\n    }\r\n\r\n    public fileDialog(mode: FileDialogMode, dialogOptions: FileDialogOptions, fileOptions: FileOptions): Promise<string> {\r\n        return this.storage.fileDialog(mode, dialogOptions, fileOptions);\r\n    }\r\n\r\n    public getFileList(path?: string, persistence?: FilePersistence, index?: number, count?: number): Promise<string[]> {\r\n        return this.storage.getFileList(path, persistence, index, count);\r\n    }\r\n\r\n    public openFile(path?: string, options?: FileOptions): Promise<string> {\r\n        return this.storage.openFile(path, options);\r\n    }\r\n\r\n    public seek(streamId: string, offset: number, origin: SeekOrigin): Promise<number> {\r\n        return this.storage.seek(streamId, offset, origin);\r\n    }\r\n\r\n    public readBinary(streamId: string, count: number): Promise<any> {\r\n        return this.storage.readBinary(streamId, count);\r\n    }\r\n\r\n    public readText(streamId: string, count: number): Promise<any> {\r\n        return this.storage.readText(streamId, count);\r\n    }\r\n\r\n    public writeBinary(streamId: string, data: any, offset: number, count: number): Promise<void> {\r\n        return this.storage.writeBinary(streamId, data, offset, count);\r\n    }\r\n\r\n    public writeText(streamId: string, data: any, offset: number, count: number): Promise<void> {\r\n        return this.storage.writeText(streamId, data, offset, count);\r\n    }\r\n    \r\n    public onmessage(source: Port, eventArges: PortMessageEventArgs) {\r\n        return super.onMessage(source, eventArges)\r\n    }\r\n}"],"sourceRoot":"/source/"}