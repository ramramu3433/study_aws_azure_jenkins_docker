import { EventTarget } from "../common/event";
import { SynchronousJsonPortMarshaler } from "./marshaler";
import { IStorageProvider } from "../interfaces/iStorageProvider";
import { Port, PortMessageEventArgs } from "./communication";
import { FileDialogMode, FileDialogOptions } from "../common/fileDialogOptions";
import { FilePersistence, FileOptions } from "../common/fileOptions";
import { SeekOrigin } from "../common/seekOrigin";
import { Promise } from "q";
export declare class StorageMarshaler extends SynchronousJsonPortMarshaler {
    storage: IStorageProvider;
    constructor(control: EventTarget, storage: IStorageProvider);
    close(streamId: string): void;
    fileDialog(mode: FileDialogMode, dialogOptions: FileDialogOptions, fileOptions: FileOptions): Promise<string>;
    getFileList(path?: string, persistence?: FilePersistence, index?: number, count?: number): Promise<string[]>;
    openFile(path?: string, options?: FileOptions): Promise<string>;
    seek(streamId: string, offset: number, origin: SeekOrigin): Promise<number>;
    readBinary(streamId: string, count: number): Promise<any>;
    readText(streamId: string, count: number): Promise<any>;
    writeBinary(streamId: string, data: any, offset: number, count: number): Promise<void>;
    writeText(streamId: string, data: any, offset: number, count: number): Promise<void>;
    onmessage(source: Port, eventArges: PortMessageEventArgs): void;
}
