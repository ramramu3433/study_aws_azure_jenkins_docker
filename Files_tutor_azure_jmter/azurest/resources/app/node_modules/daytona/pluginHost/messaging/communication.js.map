{"version":3,"sources":["../pluginHost/messaging/communication.ts"],"names":[],"mappings":"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","file":"messaging/communication.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n\"use strict\";\r\nimport {Event, EventTarget} from \"../common/event\";\r\n\r\nexport enum PortState {\r\n    connected = 0,\r\n    disconnected = 1,\r\n    closed = 2\r\n}\r\n\r\n/// Commands used for control messages.\r\n///\r\n/// Note: This data structure directs serialization/deserialization of messages; it needs to stay in-sync\r\n///       with its counterpart in ScriptedHostCommunicationManager.cs.\r\nexport enum ControlCommands {\r\n    /// <field>\r\n    /// Default value for a command. Used as a place holder for messages with no control commands.\r\n    /// </field>\r\n    none = 0,\r\n\r\n    /// <field>\r\n    /// Informs the host that a new port was created.\r\n    /// </field>\r\n    portCreated = 1,\r\n\r\n    /// <field>\r\n    /// Informs the host that an existing port was closed.\r\n    /// </field>\r\n    portClosed = 2,\r\n\r\n    /// <field>\r\n    /// Informs the plug-in that a port has been connected.\r\n    /// </field>\r\n    portConnected = 3,\r\n\r\n    /// <field>\r\n    /// Informs the host that the plug-in is initialized and is ready to receive messages.\r\n    /// </field>\r\n    controlInitialized = 4,\r\n\r\n    /// <field>\r\n    /// Informs the plug-in that the host has initialized its state and that ControlReady event should be fired.\r\n    /// </field>\r\n    hostReady = 5,\r\n\r\n    /// <field>\r\n    /// Instructs the script that an event is fired.\r\n    /// </field>\r\n    event = 6,\r\n\r\n    /// <field>\r\n    /// An error occurred as a result of a previous message. This command should only occur\r\n    /// in replies.\r\n    /// </field>\r\n    error = 7,\r\n\r\n    /// <field>\r\n    /// Informs the plug-in that the shutdown sequence has started and that the close event should be fired.\r\n    /// </field>\r\n    initiateShutdown = 8,\r\n\r\n    /// <field>\r\n    /// Informs the host that the plug-in has completed its shutdown logic and is ready to be terminated.\r\n    /// </field>\r\n    shutdownComplete = 9\r\n};\r\n\r\n/// <var>\r\n/// The default port. Represents the private communication channel between the Communication\r\n/// manager and its counterpart on the control side. this port is used for control commands\r\n/// exchange between the host and the control.\r\n///\r\n/// Note: This is used in serialization/deserialization of messages; it needs to stay in-sync\r\n///       with its counterpart in ScriptedHostCommunicationManager.js.\r\n/// </var>\r\nvar defaultPort = 0;\r\n\r\n/// <var>\r\n/// Delimiter character used to separate the Scripted Host control header from the user message contents.\r\n/// Scripted Host headers should not include this character.\r\n///\r\n/// Note: This data structure directs serialization/deserialization of messages; it needs to stay in-sync\r\n///       with its counterpart in ScriptedHostCommunicationManager.js.\r\n/// </var>\r\nvar headerDelimiter = '$';\r\n\r\nexport class PortMessageEventArgs extends Event {\r\n\r\n    constructor(public message: string, public replyRequested: boolean, public port: Port, public messageId: number) {\r\n        super();\r\n    }\r\n    public reply(message: string): void {\r\n        this.port.reply(this.messageId, message);\r\n    }\r\n\r\n    public reportError(error: any): void {\r\n        this.port.reportError(this.messageId, error);\r\n    }\r\n}\r\n\r\nexport class Port extends EventTarget {\r\n\r\n    private portState: PortState;\r\n    private portName: string;\r\n    private portId: number;\r\n\r\n    constructor(public manager: CommunicationManager, id: number, name: string) {\r\n        super();\r\n        this.portState = PortState.disconnected;\r\n        this.portName = name;\r\n        this.portId = id;\r\n    }\r\n\r\n    public get id(): number {\r\n        return this.portId;\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.portName;\r\n    }\r\n\r\n    public get state(): PortState {\r\n        return this.portState;\r\n    }\r\n\r\n    public connect(): void {\r\n        if (this.portState !== PortState.disconnected) {\r\n            return;\r\n        }\r\n        this.manager.registerPort(this);\r\n    }\r\n\r\n    public postMessage(message: string): void {\r\n        if (this.portState !== PortState.connected) {\r\n            return;\r\n        }\r\n        this.manager.postPortMessage(this.portId, message);\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.portState === PortState.closed) {\r\n            return;\r\n        }\r\n        this.portState = PortState.closed;\r\n        this.manager.unregisterPort(this);\r\n        this.manager = null;\r\n        this.dispatchEvent('close', new Event());\r\n    }\r\n\r\n    public processMessage(messageId: number, message: string, replyRequested: boolean): void {\r\n        if (this.portState === PortState.connected) {\r\n            var eventArgs = new PortMessageEventArgs(message, replyRequested, this, messageId);\r\n            this.dispatchEvent('message', eventArgs);\r\n        }\r\n    }\r\n\r\n    public processConnect(): void {\r\n        if (this.portState === PortState.closed) {\r\n            return;\r\n        }\r\n        this.portState = PortState.connected;\r\n        this.dispatchEvent('connected', new Event());\r\n    }\r\n\r\n    public processDisconnect(): void {\r\n        if (this.portState === PortState.closed) {\r\n            return;\r\n        }\r\n        this.portState = PortState.disconnected;\r\n    }\r\n\r\n    public reply(messageId: number, message: string): void {\r\n        if (this.portState === PortState.closed) {\r\n            return;\r\n        }\r\n        this.manager.postMessageReply(this.portId, messageId, message);\r\n    }\r\n\r\n    public reportError(messageId: number, error: any): void {\r\n        if (this.portState === PortState.closed) {\r\n            return;\r\n        }\r\n        this.manager.postMessageErrorReply(this.id, messageId, error);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class DelayControlReadyToken {\r\n    constructor(public manager: CommunicationManager, public tokenId: number) {\r\n        // nothing more to do\r\n    }\r\n    public unblockControlReadyEvent(): void {\r\n        this.manager.unblockControlReadyEvent(this.tokenId);\r\n    }\r\n}\r\n\r\nexport class BeforeControlReadyEventArgs extends Event {\r\n    constructor(public manager: CommunicationManager) {\r\n        super();\r\n        this.manager = manager;\r\n    }\r\n    public delayControlReadyEvent(): DelayControlReadyToken {\r\n        var tokenId = this.manager.delayControlReadyEvent();\r\n        return new DelayControlReadyToken(this.manager, tokenId);\r\n    }\r\n}\r\n\r\nexport class CommunicationManager extends EventTarget {\r\n    private lastMessageId: number;\r\n    private lastPortId: number;\r\n    private registeredPorts: { [name: string]: Port };\r\n    private registeredPortNames: { [name: string]: Port };\r\n    private pendingRemotePorts: { [name: string]: any };\r\n    private controlReadyWaitTaskList: { [name: string]: boolean; };\r\n    private controlReadyWaitTaskListLength: number;\r\n    private lastDelayControlReadyTokenId: number;\r\n    private postMessageToPlugin: (message: string) => void;\r\n\r\n    constructor(postMessageToPlugin: (message: string) => void) {\r\n        super();\r\n        this.lastMessageId = 0;\r\n        this.lastPortId = 1;\r\n        this.registeredPorts = {\r\n        };\r\n        this.registeredPortNames = {\r\n        };\r\n        this.pendingRemotePorts = {\r\n        };\r\n        this.controlReadyWaitTaskList = {\r\n        };\r\n        this.controlReadyWaitTaskListLength = 0;\r\n\r\n        this.lastDelayControlReadyTokenId = 0;\r\n        this.postMessageToPlugin = postMessageToPlugin;\r\n    }\r\n\r\n    public createPort(name: string): Port {\r\n        var portId = this.lastPortId++;\r\n        var port = new Port(this, portId, name);\r\n        this.registeredPortNames[name] = port;\r\n        return port;\r\n    }\r\n\r\n    public fireEvent(eventName: string, eventArgs: Event): void {\r\n        if (typeof eventName !== 'string' || eventName.length <= 0) {\r\n            throw new Error('Invalid eventName');\r\n        }\r\n        if (eventName.indexOf(headerDelimiter) > 0) {\r\n            throw new Error('eventName cannot contain ' + headerDelimiter);\r\n        }\r\n        this.postMessageInternal(defaultPort, ControlCommands.event, [\r\n            eventName,\r\n            eventArgs\r\n        ]);\r\n    }\r\n\r\n    public initiateShutdown(): void {\r\n        this.postMessageInternal(defaultPort, ControlCommands.initiateShutdown);\r\n    }\r\n\r\n    public postPortMessage(portId: number, message: string): void {\r\n        this.postMessageInternal(portId, ControlCommands.none, null, message);\r\n    }\r\n\r\n    public postMessageReply(portId: number, orignalMessageId: number, message: string): void {\r\n        this.postMessageInternal(portId, ControlCommands.none, null, message, orignalMessageId);\r\n    }\r\n\r\n    public postMessageErrorReply(portId: number, orignalMessageId: number, error: any): void {\r\n        this.postMessageInternal(portId, ControlCommands.error, [\r\n            {\r\n                message: error.message,\r\n                stack: error.stack,\r\n                name: error.name,\r\n                source: error.source\r\n            }\r\n        ], null, orignalMessageId);\r\n    }\r\n\r\n    public delayControlReadyEvent(): number {\r\n        var tokenId = this.lastDelayControlReadyTokenId++;\r\n        this.controlReadyWaitTaskList[tokenId] = true;\r\n        this.controlReadyWaitTaskListLength++;\r\n        return tokenId;\r\n    }\r\n\r\n    public processMessage(message: string): void {\r\n        var messageHeaderDelimiterIndex = message.indexOf(headerDelimiter);\r\n        var controlHeader: string;\r\n        var payload: string = null;\r\n        if (messageHeaderDelimiterIndex < 0) {\r\n            controlHeader = message;\r\n        } else {\r\n            controlHeader = message.substring(0, messageHeaderDelimiterIndex);\r\n            payload = message.substring(messageHeaderDelimiterIndex + 1);\r\n        }\r\n        var header = JSON.parse(controlHeader);\r\n        if (header.portId > defaultPort) {\r\n            if (this.registeredPorts[header.portId]) {\r\n                this.registeredPorts[header.portId].processMessage(header.msgId, payload, header.replyRequested);\r\n            } else {\r\n                throw new Error('CommunicationManager.processMessage: Unknown portId: ' + header.portId);\r\n            }\r\n        } else {\r\n            switch (header.command) {\r\n                case ControlCommands.controlInitialized: {\r\n                    this.pendingRemotePorts = {};\r\n                    this.disconnectPorts();\r\n                    this.controlReadyWaitTaskList = {};\r\n                    this.controlReadyWaitTaskListLength = 0;\r\n                    this.dispatchEvent('BeforeControlReady', new BeforeControlReadyEventArgs(this));\r\n                    if (this.controlReadyWaitTaskListLength === 0) {\r\n                        this.fireControlReady();\r\n                    }\r\n                    break;\r\n\r\n                }\r\n                case ControlCommands.portCreated: {\r\n                    if (!header.args || header.args.Length <= 0) {\r\n                        throw new Error('CommunicationManager.processMessage: Invalid message header for command PortCreated.');\r\n                    }\r\n                    var newPortName = header.args[0];\r\n                    if (typeof newPortName !== 'string' || newPortName.length <= 0) {\r\n                        throw new Error('CommunicationManager.processMessage: Invalid message header for command PortCreated.');\r\n                    }\r\n                    if (this.registeredPortNames[newPortName]) {\r\n                        this.connectPort(newPortName);\r\n                    } else {\r\n                        if (this.pendingRemotePorts[newPortName]) {\r\n                            throw new Error('CommunicationManager.processMessage: Received connect event for the same port more than once.');\r\n                        }\r\n                        if (!this.pendingRemotePorts[newPortName]) {\r\n                            this.pendingRemotePorts[newPortName] = {\r\n                            };\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                }\r\n                case ControlCommands.portClosed: {\r\n                    if (!header.args || header.args.Length <= 0) {\r\n                        throw new Error('CommunicationManager.processMessage: Invalid message header for command PortClosed.');\r\n                    }\r\n                    var existingPortName = header.args[0];\r\n                    if (typeof existingPortName !== 'string' || existingPortName.length <= 0) {\r\n                        throw new Error('CommunicationManager.processMessage: Invalid message header for command PortClosed.');\r\n                    }\r\n                    if (this.registeredPortNames[existingPortName]) {\r\n                        var port = this.registeredPortNames[existingPortName];\r\n                        this.disconnectPort(port.id);\r\n                    } else {\r\n                        if (!this.pendingRemotePorts[existingPortName]) {\r\n                            throw new Error('CommunicationManager.processMessage: Received close event before a create event.');\r\n                        }\r\n                        delete this.pendingRemotePorts[existingPortName];\r\n                    }\r\n                    break;\r\n\r\n                }\r\n                case ControlCommands.shutdownComplete: {\r\n                    this.dispatchEvent('ControlShutdown', new Event());\r\n                    break;\r\n\r\n                }\r\n                default: {\r\n                    throw new Error('CommunicationManager.processMessage: Unexpected command: ' + header.command);\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public unblockControlReadyEvent(tokenId: number): void {\r\n        if (this.controlReadyWaitTaskList[tokenId]) {\r\n            this.controlReadyWaitTaskList[tokenId] = null;\r\n            this.controlReadyWaitTaskListLength--;\r\n            if (this.controlReadyWaitTaskListLength === 0) {\r\n                this.fireControlReady();\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerPort(port: Port): void {\r\n        if (this.registeredPorts[port.id]) {\r\n            throw new Error('RegisterPort: Port already exists.');\r\n        }\r\n        if (!this.registeredPortNames[port.name]) {\r\n            throw new Error('RegisterPort: Port name is not listed.');\r\n        }\r\n        this.registeredPorts[port.id] = port;\r\n        this.registeredPortNames[port.name] = port;\r\n        if (this.pendingRemotePorts[port.name]) {\r\n            window.setImmediate(() => {\r\n                if (this.pendingRemotePorts[port.name]) {\r\n                    delete this.pendingRemotePorts[port.name];\r\n                    this.connectPort(port.name);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public unregisterPort(port: Port): void {\r\n        if (!this.registeredPorts[port.id]) {\r\n            throw new Error('UnregisterPort: Port does not exist.');\r\n        }\r\n        if (!this.registeredPortNames[port.name]) {\r\n            throw new Error('UnregisterPort: Port name does not exist.');\r\n        }\r\n        delete this.registeredPorts[port.id];\r\n        delete this.registeredPortNames[port.name];\r\n        this.pendingRemotePorts[port.name] = {\r\n        };\r\n        this.postMessageInternal(defaultPort, ControlCommands.portClosed, [\r\n            port.id\r\n        ]);\r\n    }\r\n\r\n    public connectPort(portName: string): void {\r\n        if (!this.registeredPortNames[portName]) {\r\n            throw new Error('ConnectPort: Port does not exist.');\r\n        }\r\n        var localPort = this.registeredPortNames[portName];\r\n        if (localPort.state !== PortState.disconnected) {\r\n            throw new Error('ConnectPort: Port state is unexpected.');\r\n        }\r\n        var portMessageArgs = [\r\n            localPort.id,\r\n            localPort.name\r\n        ];\r\n        this.postMessageInternal(defaultPort, ControlCommands.portConnected, portMessageArgs);\r\n        localPort.processConnect();\r\n    }\r\n\r\n    public disconnectPort(id: number): void {\r\n        if (!this.registeredPorts[id]) {\r\n            throw new Error('DisconnectPort: Port does not exist.');\r\n        }\r\n        var localPort = this.registeredPorts[id];\r\n        if (localPort.state !== PortState.connected) {\r\n            throw new Error('DisconnectPort: Port state is unexpected.');\r\n        }\r\n        localPort.processDisconnect();\r\n    }\r\n\r\n    public fireControlReady(): void {\r\n        this.postMessageInternal(defaultPort, ControlCommands.hostReady);\r\n        this.dispatchEvent('ControlReady', new Event());\r\n    }\r\n\r\n    public disconnectPorts(): void {\r\n        for (var p in this.registeredPorts) {\r\n            var port = this.registeredPorts[p];\r\n            if (port && port.id) {\r\n                port.processDisconnect();\r\n            }\r\n        }\r\n    }\r\n\r\n    public postMessageInternal(portId: number, command: ControlCommands, args?: any, payload?: string, replyId?: number): void {\r\n        var header: any = {\r\n            msgId: ++this.lastMessageId,\r\n            portId: portId\r\n        };\r\n        if (typeof replyId === 'number') {\r\n            header.replyId = replyId;\r\n        }\r\n        header.command = command;\r\n        if (args) {\r\n            header.args = args;\r\n        }\r\n        var message = JSON.stringify(header);\r\n        if (typeof payload === 'string') {\r\n            message += headerDelimiter + payload;\r\n        }\r\n        this.postMessageToPlugin(message);\r\n    }\r\n}"],"sourceRoot":"/source/"}