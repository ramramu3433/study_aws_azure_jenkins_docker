import { Event, EventTarget } from "../common/event";
export declare enum PortState {
    connected = 0,
    disconnected = 1,
    closed = 2,
}
export declare enum ControlCommands {
    none = 0,
    portCreated = 1,
    portClosed = 2,
    portConnected = 3,
    controlInitialized = 4,
    hostReady = 5,
    event = 6,
    error = 7,
    initiateShutdown = 8,
    shutdownComplete = 9,
}
export declare class PortMessageEventArgs extends Event {
    message: string;
    replyRequested: boolean;
    port: Port;
    messageId: number;
    constructor(message: string, replyRequested: boolean, port: Port, messageId: number);
    reply(message: string): void;
    reportError(error: any): void;
}
export declare class Port extends EventTarget {
    manager: CommunicationManager;
    private portState;
    private portName;
    private portId;
    constructor(manager: CommunicationManager, id: number, name: string);
    readonly id: number;
    readonly name: string;
    readonly state: PortState;
    connect(): void;
    postMessage(message: string): void;
    close(): void;
    processMessage(messageId: number, message: string, replyRequested: boolean): void;
    processConnect(): void;
    processDisconnect(): void;
    reply(messageId: number, message: string): void;
    reportError(messageId: number, error: any): void;
}
export declare class DelayControlReadyToken {
    manager: CommunicationManager;
    tokenId: number;
    constructor(manager: CommunicationManager, tokenId: number);
    unblockControlReadyEvent(): void;
}
export declare class BeforeControlReadyEventArgs extends Event {
    manager: CommunicationManager;
    constructor(manager: CommunicationManager);
    delayControlReadyEvent(): DelayControlReadyToken;
}
export declare class CommunicationManager extends EventTarget {
    private lastMessageId;
    private lastPortId;
    private registeredPorts;
    private registeredPortNames;
    private pendingRemotePorts;
    private controlReadyWaitTaskList;
    private controlReadyWaitTaskListLength;
    private lastDelayControlReadyTokenId;
    private postMessageToPlugin;
    constructor(postMessageToPlugin: (message: string) => void);
    createPort(name: string): Port;
    fireEvent(eventName: string, eventArgs: Event): void;
    initiateShutdown(): void;
    postPortMessage(portId: number, message: string): void;
    postMessageReply(portId: number, orignalMessageId: number, message: string): void;
    postMessageErrorReply(portId: number, orignalMessageId: number, error: any): void;
    delayControlReadyEvent(): number;
    processMessage(message: string): void;
    unblockControlReadyEvent(tokenId: number): void;
    registerPort(port: Port): void;
    unregisterPort(port: Port): void;
    connectPort(portName: string): void;
    disconnectPort(id: number): void;
    fireControlReady(): void;
    disconnectPorts(): void;
    postMessageInternal(portId: number, command: ControlCommands, args?: any, payload?: string, replyId?: number): void;
}
