{"version":3,"sources":["../pluginHost/messaging/marshaler.ts"],"names":[],"mappings":"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","file":"messaging/marshaler.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n \"use strict\";\r\nimport {Event, EventTarget} from \"../common/event\";\r\nimport {Port, PortMessageEventArgs, DelayControlReadyToken, BeforeControlReadyEventArgs} from \"./communication\";\r\nimport * as Q from \"q\";\r\nimport {Promise} from \"q\";\r\n\r\nexport class PortMarshaler extends EventTarget {\r\n    private port: Port;\r\n    private instanceInitialized: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public initialize(newPort: Port): void {\r\n        if (!newPort) {\r\n            throw new Error('Invalid port');\r\n        }\r\n        this.port = newPort;\r\n        this.port.addEventListener('message', this.onMessage.bind(this));\r\n        this.port.addEventListener('connected', this.onConnected.bind(this));\r\n    }\r\n    public onMessage(source: Port, eventArgs: PortMessageEventArgs): void {\r\n        try {\r\n            var result = this.messageReceived(eventArgs.message);\r\n            if (eventArgs.replyRequested) {\r\n                if (result && Promise.prototype.isPrototypeOf(result)) {\r\n                    result.done((promiseResult: string) => {\r\n                        eventArgs.reply(promiseResult);\r\n                    }, (error: any) => {\r\n                        eventArgs.reportError(error);\r\n                    });\r\n                } else {\r\n                    eventArgs.reply(<string>result);\r\n                }\r\n            }\r\n        } catch (ex) {\r\n            if (eventArgs.replyRequested) {\r\n                eventArgs.reportError(ex);\r\n            }\r\n        }\r\n    }\r\n    public onConnected(source: Port, eventArgs: Event): void {\r\n        if (!this.instanceInitialized) {\r\n            this.initializeMarshaler();\r\n            this.instanceInitialized = true;\r\n        }\r\n        this.dispatchEvent('PortConnected', new Event());\r\n    }\r\n    public messageReceived(message: string): any /* string or TPromise<string> */ {\r\n        return null;\r\n    }\r\n    public initializeMarshaler(): void {\r\n        // implemented in subclasses\r\n    }\r\n    public postMessage(message: string): void {\r\n        this.port.postMessage(message);\r\n    }\r\n    public closePort(): void {\r\n        if (this.port) {\r\n            this.port.removeEventListener('message', this.onMessage);\r\n            this.port.removeEventListener('connected', this.onConnected);\r\n            this.port.close();\r\n        }\r\n    }\r\n    public dispose(): void {\r\n        this.closePort();\r\n    }\r\n}\r\n\r\nexport class JsonPortMarshaler extends PortMarshaler {\r\n    constructor(objDefinition?: any) {\r\n        super();\r\n        if (objDefinition && typeof objDefinition === 'object') {\r\n            Object.getOwnPropertyNames(objDefinition).forEach((name) => {\r\n                var pd = Object.getOwnPropertyDescriptor(objDefinition, name);\r\n                Object.defineProperty(this, name, pd);\r\n            });\r\n        }\r\n    }\r\n    \r\n    public onMessage(source: Port, eventArgs: PortMessageEventArgs): void {\r\n        try {\r\n            var message = eventArgs.message;\r\n            var request = JSON.parse(message);\r\n            var methodName = request.method;\r\n            var method = this[methodName];\r\n            if (typeof method === 'function') {\r\n                var callResult = method.apply(this, request.args);\r\n                if (eventArgs.replyRequested) {\r\n                    if (callResult && typeof callResult.then === 'function') {\r\n                        callResult.then((promiseResult: any) => {\r\n                            var result = {\r\n                                result: promiseResult || ''\r\n                            };\r\n                            eventArgs.reply(JSON.stringify(result));\r\n                        }, (error: any) => {\r\n                            eventArgs.reportError(error);\r\n                        });\r\n                    } else {\r\n                        var result = {\r\n                            result: callResult || ''\r\n                        };\r\n                        eventArgs.reply(JSON.stringify(result));\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('Unknown method: ' + methodName);\r\n            }\r\n        } catch (ex) {\r\n            if (eventArgs.replyRequested) {\r\n                eventArgs.reportError(ex);\r\n            }\r\n        }\r\n    }\r\n    public messageReceived(message: string): any {\r\n        var request = JSON.parse(message);\r\n        var methodName = request.method;\r\n        var method = this[methodName];\r\n        if (typeof method === 'function') {\r\n            var callResult = method.apply(this, request.args);\r\n            var result = {\r\n                result: callResult || ''\r\n            };\r\n            return JSON.stringify(result);\r\n        }\r\n        throw new Error('Unknown method: ' + methodName);\r\n    }\r\n    public fireEvent(eventName: string, eventArgs: any): void {\r\n        var response = {\r\n            eventName: eventName,\r\n            arg: eventArgs\r\n        };\r\n        this.postMessage(JSON.stringify(response));\r\n    }\r\n}\r\nexport class SynchronousJsonPortMarshaler extends JsonPortMarshaler {\r\n    private connectFired: boolean;\r\n    private delayControlReadyToken: DelayControlReadyToken;\r\n\r\n    constructor(control: EventTarget) {\r\n        super();\r\n        control.addEventListener('BeforeControlReady', (source: EventTarget, eventArgs: BeforeControlReadyEventArgs) => {\r\n            if (this.connectFired) {\r\n                this.connectFired = false;\r\n            } else {\r\n                this.delayControlReadyToken = eventArgs.delayControlReadyEvent();\r\n            }\r\n        });\r\n        this.addEventListener('PortConnected', (source, eventArgs) => {\r\n            this.initializeState();\r\n            if (this.delayControlReadyToken) {\r\n                this.delayControlReadyToken.unblockControlReadyEvent();\r\n                this.delayControlReadyToken = null;\r\n            } else {\r\n                this.connectFired = true;\r\n            }\r\n        });\r\n    }\r\n    public initializeState(): void {\r\n        // implemented in subclasses\r\n    }\r\n}"],"sourceRoot":"/source/"}