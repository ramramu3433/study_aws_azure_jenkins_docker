/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Path = require("path");
var Q = require("q");
var event_1 = require("./common/event");
var storageMarshaler_1 = require("./messaging/storageMarshaler");
var marshaler_1 = require("./messaging/marshaler");
var communication_1 = require("./messaging/communication");
var outputMarshaler_1 = require("./messaging/outputMarshaler");
var themeMarshaler_1 = require("./messaging/themeMarshaler");
var resourcesMarshaler_1 = require("./messaging/resourcesMarshaler");
var commandMarshaler_1 = require("./messaging/commandMarshaler");
var contextMenuMarshaler_1 = require("./messaging/contextMenuMarshaler");
var settingsMarshaler_1 = require("./messaging/settingsMarshaler");
var hostMarshaler_1 = require("./messaging/hostMarshaler");
var tooltipMarshaler_1 = require("./messaging/tooltipMarshaler");
var uri = require("urijs");
var outputMarhalerName = "Plugin.Output";
var storageMarshalerName = "Plugin.Storage";
var themeMarshalerName = "Plugin.Theme";
var resourcesMarshalerName = "Plugin.Resources";
var commandsMarshalerName = "plugin.VS.Commands";
var settingsMarshalerName = "Plugin.Settings";
var contextMenuMarshalerName = "Plugin.ContextMenu";
var hostMarshalerName = "Plugin.Host";
var tooltipMarshalerName = "Plugin.Tooptip";
var ScriptedControl = (function (_super) {
    __extends(ScriptedControl, _super);
    function ScriptedControl(hostName, jsonManifest, baseDirectory, parameters, initInSeparateProcess, providers) {
        var _this = _super.call(this) || this;
        _this.hostName = hostName;
        _this.controlClosed = false;
        _this.baseDirectory = baseDirectory;
        _this.parameters = parameters;
        _this.useNativeWebView = initInSeparateProcess;
        _this.providers = providers;
        if (!jsonManifest) {
            throw new Error('Invalid jsonManifest');
        }
        if (typeof baseDirectory !== 'string') {
            throw new Error('Invalid baseDirectory');
        }
        if (!_this.providers) {
            throw new Error('Invalid providers');
        }
        if (!_this.providers.fileProvider || typeof _this.providers.fileProvider.getFileContents !== 'function') {
            throw new Error('Invalid fileProvider');
        }
        _this.communicationManager = new communication_1.CommunicationManager(_this.postMessageToPlugin.bind(_this));
        _this.exportedObjects = {};
        _this.communicationManager.addEventListener('BeforeControlReady', function (source, args) {
            if (!_this.useNativeWebView) {
                var iframe = _this.iframe;
                iframe.contentWindow.onfocus = function () {
                    _this.dispatchEvent('GotFocus', new event_1.Event());
                };
                iframe.contentWindow.onblur = function () {
                    _this.dispatchEvent('LostFocus', new event_1.Event());
                };
            }
            else {
                var webView = _this.iframe;
                webView.onfocus = function () {
                    _this.dispatchEvent('GotFocus', new event_1.Event());
                };
                webView.onblur = function () {
                    _this.dispatchEvent('LostFocus', new event_1.Event());
                };
            }
            _this.dispatchEvent('BeforeControlReady', args);
        });
        _this.communicationManager.addEventListener('ControlReady', function (source, args) {
            _this.dispatchEvent('ControlReady', args);
        });
        var url = _this.baseDirectory + jsonManifest.start_url + _this.getURLParameters();
        _this.startUrl = _this.providers.fileProvider.getResolvedFilePath(url);
        _this.createFrame(_this.startUrl, jsonManifest);
        return _this;
    }
    ScriptedControl.prototype.createFrame = function (src, jsonManifest) {
        var _this = this;
        if (!this.useNativeWebView) {
            var frame = document.createElement('iframe');
            frame.setAttribute('sandbox', 'allow-scripts allow-popups allow-same-origin');
            frame.id = 'ScriptedControl_' + ScriptedControl.lastControlId++;
            frame.src = src;
            this.iframe = frame;
            window.addEventListener('message', function (event) {
                if (event.source === frame.contentWindow) {
                    event.stopPropagation();
                    _this.processMessage(event.data.toString());
                }
            });
        }
        else {
            var s = '<webview nodeintegration disablewebsecurity src="' + src + '"></webview>';
            var div = document.createElement('div');
            div.innerHTML = s;
            var webview = div.firstChild;
            webview.addEventListener('ipc-message', function (event) {
                _this.processMessage(event.channel);
            });
            webview.addEventListener('destroyed', function () {
                _this.iframe = null;
            });
            /*
            webview.addEventListener('did-start-loading', () => {
                if (Electron.getCurrentWindow().isDevToolsOpened()) {
                    webview.openDevTools();
                }
            });

            webview.addEventListener('console-message', (e: any) => {
                console.log('Webview output: ', <string> e.message);
            });
            webview.addEventListener('did-get-redirect-request', () => console.log('Webview did-get-redirect-request') );
            webview.addEventListener('new-window', () => console.log('webview new-window') );
            webview.addEventListener('crashed', () => console.log('webview crashed') );
            webview.addEventListener('close', () => console.log('webview close') );
            webview.addEventListener('did-stop-loading', () => console.log('webview did-stop-loading'));
            webview.addEventListener('did-frame-finish-load', () => console.log('webview did-frame-finish-load'));
            webview.addEventListener('did-fail-load', () => console.log('webview did-fail-load'));
            webview.addEventListener('did-finish-load', () => console.log('webview did-finish-load'));
            */
            this.iframe = webview;
        }
        this.publishLibraryObjects(jsonManifest);
    };
    ScriptedControl.prototype.getURLParameters = function () {
        var scriptLocation = Path.resolve(__dirname, "..", "plugin.electron.js");
        var query;
        query = {
            pluginUrl: encodeURIComponent(scriptLocation),
            hostDescription: this.hostName,
            parameters: this.parameters ? encodeURIComponent(JSON.stringify(this.parameters)) : ""
        };
        return "?" + uri.buildQuery(query);
    };
    ScriptedControl.prototype.reportError = function (message) {
        if (this.providers.logProvider) {
            this.providers.logProvider.logError(message);
        }
    };
    ScriptedControl.prototype.createPort = function (name) {
        return this.communicationManager.createPort(name);
    };
    ScriptedControl.prototype.fireEvent = function (eventName, eventArgs) {
        this.communicationManager.fireEvent(eventName, eventArgs);
    };
    ScriptedControl.prototype.publishObject = function (name, objectMarshaler) {
        if (typeof name !== 'string') {
            throw new Error('Invalid name');
        }
        if (!objectMarshaler || typeof objectMarshaler.initialize !== 'function') {
            throw new Error('Invalid objectMarshaler');
        }
        var port;
        try {
            port = this.createPort(name);
            objectMarshaler.initialize(port);
            this.exportedObjects[name] = objectMarshaler;
            port.connect();
        }
        catch (e) {
            if (port) {
                port.close();
            }
            throw e;
        }
    };
    ScriptedControl.prototype.close = function () {
        if (this.controlClosed) {
            return;
        }
        this.controlClosed = true;
        var resourcesReleased = false;
        var self = this;
        function releaseResources() {
            if (resourcesReleased || !self.iframe) {
                return;
            }
            resourcesReleased = true;
            self.iframe.style.display = 'none';
            self.iframe = null;
        }
        this.communicationManager.addEventListener('ControlShutdown', releaseResources);
        this.communicationManager.initiateShutdown();
        window.setTimeout(function () {
            releaseResources();
        }, 2000);
        this.dispatchEvent('ControlClosed', new event_1.Event());
    };
    ScriptedControl.prototype.postMessageToPlugin = function (message) {
        if (this.iframe) {
            if (this.useNativeWebView) {
                this.iframe.send('daytona', message);
            }
            else {
                var contentWindow = this.iframe.contentWindow;
                if (contentWindow) {
                    contentWindow.postMessage(message, '*');
                }
            }
        }
    };
    ScriptedControl.prototype.publishLibraryObjects = function (jsonManifest) {
        var _this = this;
        this.publishObject(outputMarhalerName, new outputMarshaler_1.OutputMarshaler(this.providers.logProvider));
        // publish storage
        if (this.providers.storageProvider) {
            var storageMarshaler = new storageMarshaler_1.StorageMarshaler(this, this.providers.storageProvider);
            this.publishObject(storageMarshalerName, storageMarshaler);
        }
        if (this.providers.themeProvider) {
            var pluginCss;
            var themeMap;
            var themePromises = [];
            themePromises.push(this.providers.themeProvider.getPluginCss().then(function (css) {
                pluginCss = css;
            }));
            themePromises.push(this.providers.themeProvider.getThemeMap().then(function (map) {
                themeMap = map;
                // add themed images
                var hostConfig = jsonManifest.webhost;
                if (hostConfig) {
                    var themed_images = hostConfig['themed_images'];
                    for (var key in themed_images) {
                        var imageConfig = themed_images[key];
                        if (!imageConfig) {
                            return;
                        }
                        var path = imageConfig["bitmap_source"];
                        // If the path starts with "data:" it means it represents the
                        // serialized content of the image, otherwise is an actual path
                        // and we need to concatenate it with the base directory.
                        if (path && !(path.toLowerCase().indexOf("data:") === 0)) {
                            path = _this.baseDirectory + path;
                        }
                        themeMap[key] = path;
                    }
                }
            }));
            Q.all(themePromises).then(function () {
                var themeMarshaler = new themeMarshaler_1.ThemeMarshaler(_this, _this.providers.fileProvider, themeMap, pluginCss);
                _this.publishObject(themeMarshalerName, themeMarshaler);
                _this.providers.themeProvider.addEventListener('themechanged', function () {
                    _this.providers.themeProvider.getThemeMap().then(function (map) {
                        themeMarshaler.fireThemeChangedEvent(map);
                    });
                });
            }, function (error) {
                _this.reportError('Cannot load theme resources: ' + error);
            });
        }
        if (this.providers.resourcesProvider) {
            var aliases = jsonManifest['resource_aliases'];
            this.loadResourcesAndAlias(this.baseDirectory, aliases).then(function (result) {
                if (result) {
                    var resourceMarshaler = new resourcesMarshaler_1.ResourcesMarshaler(_this, result.resourceMap, result.defaultAlias, _this.providers.resourcesProvider.getDefaultErrorMessage());
                    _this.publishObject(resourcesMarshalerName, resourceMarshaler);
                    _this.providers.resourcesProvider.addEventListener('culturechanged', function () {
                        _this.loadResourcesAndAlias(_this.baseDirectory, aliases).then(function (result) {
                            if (result) {
                                resourceMarshaler.fireResourcesChangedEvent(result.resourceMap);
                            }
                        }, function (error) {
                            _this.reportError('Cannot load resources: ' + error);
                        });
                    });
                }
            }, function (error) {
                _this.reportError('Cannot load resources: ' + error);
            });
        }
        if (this.providers.commandsProvider) {
            var names = this.providers.commandsProvider.getAliases();
            var commandsMarshaller = new commandMarshaler_1.CommandsMarshaler(this, names.menuNames, names.commandNames, this.providers.commandsProvider);
            this.publishObject(commandsMarshalerName, commandsMarshaller);
            this.providers.commandsProvider.addEventListener('commandexec', function (source, event) {
                commandsMarshaller.fireCommandExecuted(event.commandName);
            });
        }
        if (this.providers.settingsProvider) {
            var settingsMarshaller = new settingsMarshaler_1.SettingsMarshaler(this, this.providers.settingsProvider);
            this.publishObject(settingsMarshalerName, settingsMarshaller);
        }
        if (this.providers.contextMenuProvider) {
            var contextMenuMarshaller = new contextMenuMarshaler_1.ContextMenuMarshaler(this, this.providers.contextMenuProvider);
            this.publishObject(contextMenuMarshalerName, contextMenuMarshaller);
            ['contextmenuclicked', 'contextmenudismissed', 'contextmenufocused', 'contextmenuinitialized', 'contextmenuopened'].forEach(function (eventType) {
                _this.providers.contextMenuProvider.addEventListener(eventType, function (source, event) {
                    contextMenuMarshaller.fireEvent(eventType, event);
                });
            });
        }
        if (this.providers.hostProvider) {
            var hostMarshaler = new hostMarshaler_1.HostMarshaler(this.providers.hostProvider);
            this.publishObject(hostMarshalerName, hostMarshaler);
        }
        if (this.providers.tooltipProvider) {
            var tooltipMarshaler = new tooltipMarshaler_1.TooltipMarshaler(this.providers.tooltipProvider);
            this.publishObject(tooltipMarshalerName, tooltipMarshaler);
        }
    };
    ScriptedControl.prototype.loadResourcesAndAlias = function (baseDirectory, aliases) {
        var aliasPromises = [];
        var resourceMap = {};
        var defaultAlias;
        if (aliases) {
            for (var alias in aliases) {
                (function (aliasKey, resourcesProvider) {
                    aliasPromises.push(resourcesProvider.loadResources(baseDirectory, aliases[aliasKey].path).then(function (loadedResources) {
                        resourceMap[aliasKey] = loadedResources;
                    }));
                    if (aliases[aliasKey]['is_default']) {
                        defaultAlias = aliasKey;
                    }
                })(alias, this.providers.resourcesProvider);
            }
            return Q.all(aliasPromises).then(function () {
                return {
                    resourceMap: resourceMap,
                    defaultAlias: defaultAlias
                };
            });
        }
        return Q.resolve(null);
    };
    ScriptedControl.prototype.processMessage = function (message) {
        if (message[0] === '_' && message[1] === '_') {
            var controlMessage = JSON.parse(message.substr(2));
            switch (controlMessage.method) {
                case 'reportError': {
                    if (this.providers.logProvider) {
                        var message = '';
                        if (controlMessage.args && controlMessage.args.length >= 2) {
                            message += controlMessage.args[0] + '\n at: ' + controlMessage.args[1] + ' (' + controlMessage.args[2] + ')' + (controlMessage.args[3] ? ('\n additional information: ' + controlMessage.args[3]) : '');
                        }
                        this.reportError('ScriptedControl Error: ' + message);
                    }
                    break;
                }
                case 'terminate': {
                    //this.close();
                    break;
                }
                case 'fireCodeMarker': {
                    break;
                }
                default: {
                    break;
                }
            }
        }
        else {
            this.communicationManager.processMessage(message);
        }
    };
    ScriptedControl.prototype.processFocusEvent = function () {
        this.dispatchEvent('GotFocus', new event_1.Event());
    };
    ScriptedControl.prototype.processBlurEvent = function () {
        this.dispatchEvent('LostFocus', new event_1.Event());
    };
    ScriptedControl.prototype.createSynchronousJsonPortMarshaler = function (objDefinition) {
        var marshaler = new marshaler_1.SynchronousJsonPortMarshaler(this);
        if (objDefinition && typeof objDefinition === 'object') {
            Object.getOwnPropertyNames(objDefinition).forEach(function (name) {
                var pd = Object.getOwnPropertyDescriptor(objDefinition, name);
                Object.defineProperty(marshaler, name, pd);
            });
        }
        return marshaler;
    };
    return ScriptedControl;
}(event_1.EventTarget));
ScriptedControl.lastControlId = 0;
exports.ScriptedControl = ScriptedControl;

//# sourceMappingURL=scriptedControl.js.map
// SIG // Begin signature block
// SIG // MIIargYJKoZIhvcNAQcCoIIanzCCGpsCAQExCzAJBgUr
// SIG // DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
// SIG // gjcCAR4wJAIBAQQQEODJBs441BGiowAQS9NQkAIBAAIB
// SIG // AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFHeec+NArznY
// SIG // ZnwUq2yn4GKEo63zoIIVgzCCBMMwggOroAMCAQICEzMA
// SIG // AADGeIA2AXUaaXIAAAAAAMYwDQYJKoZIhvcNAQEFBQAw
// SIG // dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE2MDkwNzE3
// SIG // NTg1M1oXDTE4MDkwNzE3NTg1M1owgbMxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgRFNFIEVTTjpGNTI4LTM3NzctOEE3NjEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAK0LIxuoyogoFDbjw2hdBoQodUGHEqicqTQCYKGt
// SIG // RrYKDayl0w1GReivnhzzc17/b/y2mC2V9hsjiPZRs+eb
// SIG // V1b9TcuiNbnlYctnFAIXRPiJFUegLQqPAK/Lh8BKZMk4
// SIG // vuGMK+rDhjO2K8AasPknmgYwcDjfvBPEgM9KYJhx4+HD
// SIG // b7eQOkfiEAurcohcfiRDDtaqpyE0iNqsd5Dl4Q98kxeG
// SIG // I40Z08dxxqX2sFAsn1rMWrABx5SCxAH7FQJl7G6+FwAt
// SIG // hwWRil6NN4wJn75m4G5t1eCgStvelJ56fdkWZsABKi9P
// SIG // J/pa5fjxHesOBPZrRR4UfcBkltvQuf9Gzmq/cx8CAwEA
// SIG // AaOCAQkwggEFMB0GA1UdDgQWBBTUv/YysIgxD+YZlPE+
// SIG // vzH6WwIPCTAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
// SIG // syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
// SIG // AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
// SIG // ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
// SIG // AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQCYWwDc76NI
// SIG // i+RQOWeUJMBvj75A3zmmLE2JLKhZPjIKasz8XBcEmDBP
// SIG // 0v8MooXeJcIEOgj3TuQBs95uQ2VO4D0uRXApddJPaU8W
// SIG // eLPOez7vGaxNsa51MlIkBZeQ2Eja6ET7kGEWWV7NsStV
// SIG // lZ9SXMHAMCcH7tZMJ3mzw/dKNQ0ZTaMxxdzTGiKNJwk0
// SIG // QDfOnkgcinWKQ53YKVS0qDdsFJ7IeGy3GaqHeKM3ZL4B
// SIG // kuzdQH9fERBUlAVa2n+zKEsSnjSCiy8oYDcQ8Wca1IJz
// SIG // 298y+98zo+NANSG8N1syaG/L2CvoAWFjkZeI5urwsAKv
// SIG // +fdc/N+BwzR+tFHdGx/sUuz6MIIE7TCCA9WgAwIBAgIT
// SIG // MwAAAUCWqe5wVv7MBwABAAABQDANBgkqhkiG9w0BAQUF
// SIG // ADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpN
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xNjA4
// SIG // MTgyMDE3MTdaFw0xNzExMDIyMDE3MTdaMIGDMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYD
// SIG // VQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0G
// SIG // CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbS4vpA2pf
// SIG // yBtdCgU55NUOktDE4YvopA0FGVjAPNcp3Ym3aG5Ln368
// SIG // mr1Uhjmp8Tg1FuYdrPuua9wJMO+4Ht9s+EqaVZdIyCOJ
// SIG // s1knNL2VMUecD85ANTI3/unzT6QapLN5vICbPySYxNFv
// SIG // 1X/nQ43k3PLS5q5m7QQ6IZSmV9wD2yzGG/8rOahdv1X+
// SIG // 3UnfVAWUqzPfpH0xpk29Vs8WMWg/hGscbfPu1TCK7mUb
// SIG // nrcIHCl+k73yfUJ2OCLUe3z0uLlxnsOU9IKGNYKmdL0C
// SIG // M/pUhoWjJb6qiV7iOV8mQZga3rnmRoV4u1EyAkfs5Pkf
// SIG // vQRRdeYSm3brhZcUIgqhE/dhAgMBAAGjggFhMIIBXTAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUnOXo
// SIG // bYJXrjck3upeqcRfkB3O2XswUgYDVR0RBEswSaRHMEUx
// SIG // DTALBgNVBAsTBE1PUFIxNDAyBgNVBAUTKzIyOTgwMytm
// SIG // Nzg1YjFjMC01ZDlmLTQzMTYtOGQ2YS03NGFlNjQyZGRl
// SIG // MWMwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUya
// SIG // Ch8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWlj
// SIG // Q29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUF
// SIG // BwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQ
// SIG // Q0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQAD
// SIG // ggEBAGvkVuPXEx0gQPlt6d5O210exmwmo/flCYAM/1fh
// SIG // tNTZ+VxI4QZ/wqRUuJZ69Y3JgxMMcb/4/LsuzBVz8wBr
// SIG // TiWq9MQKcpRSn3dNKZMoCDEW2d9udKvE6E4VsZkFRE4a
// SIG // SUksrHnuv4VPhG5H777Y0otJaQ4pg/WlvaMbIa2ipT6Q
// SIG // IJz1nxI9ell1ZO/ao4WEMhICAmpkdwGmOZiz7qIoSWys
// SIG // JDIoPqiLZiz7AtiDLyOSkfdXZf+k1elRCJT21v3A1cAg
// SIG // Rf1DSU957mQZf2BO4sTKU04f+1qRDVvNJIN8c+jJQncS
// SIG // XzEmybDOU4phVPfCjXKZ8cW2HX6qkIQEOpd5rWAwggW8
// SIG // MIIDpKADAgECAgphMyYaAAAAAAAxMA0GCSqGSIb3DQEB
// SIG // BQUAMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJ
// SIG // kiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1p
// SIG // Y3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0
// SIG // eTAeFw0xMDA4MzEyMjE5MzJaFw0yMDA4MzEyMjI5MzJa
// SIG // MHkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xIzAhBgNVBAMTGk1p
// SIG // Y3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBMIIBIjANBgkq
// SIG // hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsnJZXBkwZL8d
// SIG // mmAgIEKZdlNsPhvWb8zL8epr/pcWEODfOnSDGrcvoDLs
// SIG // /97CQk4j1XIA2zVXConKriBJ9PBorE1LjaW9eUtxm0cH
// SIG // 2v0l3511iM+qc0R/14Hb873yNqTJXEXcr6094Cholxqn
// SIG // pXJzVvEXlOT9NZRyoNZ2Xx53RYOFOBbQc1sFumdSjaWy
// SIG // aS/aGQv+knQp4nYvVN0UMFn40o1i/cvJX0YxULknE+RA
// SIG // MM9yKRAoIsc3Tj2gMj2QzaE4BoVcTlaCKCoFMrdL109j
// SIG // 59ItYvFFPeesCAD2RqGe0VuMJlPoeqpK8kbPNzw4nrR3
// SIG // XKUXno3LEY9WPMGsCV8D0wIDAQABo4IBXjCCAVowDwYD
// SIG // VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUyxHoytK0FlgB
// SIG // yTcuMxYWuUyaCh8wCwYDVR0PBAQDAgGGMBIGCSsGAQQB
// SIG // gjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYEFP3RMU7T
// SIG // JoqV4ZhgO6gxb6Y8vNgtMBkGCSsGAQQBgjcUAgQMHgoA
// SIG // UwB1AGIAQwBBMB8GA1UdIwQYMBaAFA6sgmBAVieX5SUT
// SIG // /CrhClOVWeSkMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL21pY3Jvc29mdHJvb3RjZXJ0LmNybDBUBggrBgEF
// SIG // BQcBAQRIMEYwRAYIKwYBBQUHMAKGOGh0dHA6Ly93d3cu
// SIG // bWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljcm9zb2Z0
// SIG // Um9vdENlcnQuY3J0MA0GCSqGSIb3DQEBBQUAA4ICAQBZ
// SIG // OT5/Jkav629AsTK1ausOL26oSffrX3XtTDst10OtC/7L
// SIG // 6S0xoyPMfFCYgCFdrD0vTLqiqFac43C7uLT4ebVJcvc+
// SIG // 6kF/yuEMF2nLpZwgLfoLUMRWzS3jStK8cOeoDaIDpVbg
// SIG // uIpLV/KVQpzx8+/u44YfNDy4VprwUyOFKqSCHJPilAcd
// SIG // 8uJO+IyhyugTpZFOyBvSj3KVKnFtmxr4HPBT1mfMIv9c
// SIG // Hc2ijL0nsnljVkSiUc356aNYVt2bAkVEL1/02q7UgjJu
// SIG // /KSVE+Traeepoiy+yCsQDmWOmdv1ovoSJgllOJTxeh9K
// SIG // u9HhVujQeJYYXMk1Fl/dkx1Jji2+rTREHO4QFRoAXd01
// SIG // WyHOmMcJ7oUOjE9tDhNOPXwpSJxy0fNsysHscKNXkld9
// SIG // lI2gG0gDWvfPo2cKdKU27S0vF8jmcjcS9G+xPGeC+VKy
// SIG // jTMWZR4Oit0Q3mT0b85G1NMX6XnEBLTT+yzfH4qerAr7
// SIG // EydAreT54al/RrsHYEdlYEBOsELsTu2zdnnYCjQJbRyA
// SIG // MR/iDlTd5aH75UcQrWSY/1AWLny/BSF64pVBJ2nDk4+V
// SIG // yY3YmyGuDVyc8KKuhmiDDGotu3ZrAB2WrfIWe/YWgyS5
// SIG // iM9qqEcxL5rc43E91wB+YkfRzojJuBj6DnKNwaM9rwJA
// SIG // av9pm5biEKgQtDdQCNbDPTCCBgcwggPvoAMCAQICCmEW
// SIG // aDQAAAAAABwwDQYJKoZIhvcNAQEFBQAwXzETMBEGCgmS
// SIG // JomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1p
// SIG // Y3Jvc29mdDEtMCsGA1UEAxMkTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5MB4XDTA3MDQwMzEy
// SIG // NTMwOVoXDTIxMDQwMzEzMDMwOVowdzELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
// SIG // MIIBCgKCAQEAn6Fssd/bSJIqfGsuGeG94uPFmVEjUK3O
// SIG // 3RhOJA/u0afRTK10MCAR6wfVVJUVSZQbQpKumFwwJtoA
// SIG // a+h7veyJBw/3DgSY8InMH8szJIed8vRnHCz8e+eIHern
// SIG // TqOhwSNTyo36Rc8J0F6v0LBCBKL5pmyTZ9co3EZTsIbQ
// SIG // 5ShGLieshk9VUgzkAyz7apCQMG6H81kwnfp+1pez6CGX
// SIG // fvjSE/MIt1NtUrRFkJ9IAEpHZhEnKWaol+TTBoFKovmE
// SIG // pxFHFAmCn4TtVXj+AZodUAiFABAwRu233iNGu8QtVJ+v
// SIG // HnhBMXfMm987g5OhYQK1HQ2x/PebsgHOIktU//kFw8Ig
// SIG // CwIDAQABo4IBqzCCAacwDwYDVR0TAQH/BAUwAwEB/zAd
// SIG // BgNVHQ4EFgQUIzT42VJGcArtQPt2+7MrsMM1sw8wCwYD
// SIG // VR0PBAQDAgGGMBAGCSsGAQQBgjcVAQQDAgEAMIGYBgNV
// SIG // HSMEgZAwgY2AFA6sgmBAVieX5SUT/CrhClOVWeSkoWOk
// SIG // YTBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZIm
// SIG // iZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNy
// SIG // b3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHmC
// SIG // EHmtFqFKoKWtTHNY9AcTLmUwUAYDVR0fBEkwRzBFoEOg
// SIG // QYY/aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9j
// SIG // cmwvcHJvZHVjdHMvbWljcm9zb2Z0cm9vdGNlcnQuY3Js
// SIG // MFQGCCsGAQUFBwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9N
// SIG // aWNyb3NvZnRSb290Q2VydC5jcnQwEwYDVR0lBAwwCgYI
// SIG // KwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggIBABCXisNc
// SIG // A0Q23em0rXfbznlRTQGxLnRxW20ME6vOvnuPuC7UEqKM
// SIG // bWK4VwLLTiATUJndekDiV7uvWJoc4R0Bhqy7ePKL0Ow7
// SIG // Ae7ivo8KBciNSOLwUxXdT6uS5OeNatWAweaU8gYvhQPp
// SIG // kSokInD79vzkeJkuDfcH4nC8GE6djmsKcpW4oTmcZy3F
// SIG // UQ7qYlw/FpiLID/iBxoy+cwxSnYxPStyC8jqcD3/hQoT
// SIG // 38IKYY7w17gX606Lf8U1K16jv+u8fQtCe9RTciHuMMq7
// SIG // eGVcWwEXChQO0toUmPU8uWZYsy0v5/mFhsxRVuidcJRs
// SIG // rDlM1PZ5v6oYemIp76KbKTQGdxpiyT0ebR+C8AvHLLvP
// SIG // Q7Pl+ex9teOkqHQ1uE7FcSMSJnYLPFKMcVpGQxS8s7Ow
// SIG // TWfIn0L/gHkhgJ4VMGboQhJeGsieIiHQQ+kr6bv0SMws
// SIG // 1NgygEwmKkgkX1rqVu+m3pmdyjpvvYEndAYR7nYhv5uC
// SIG // wSdUtrFqPYmhdmG0bqETpr+qR/ASb/2KMmyy/t9RyIwj
// SIG // yWa9nR2HEmQCPS2vWY+45CHltbDKY7R4VAXUQS5QrJSw
// SIG // pXirs6CWdRrZkocTdSIvMqgIbqBbjCW/oO+EyiHW6x5P
// SIG // yZruSeD3AWVviQt9yGnI5m7qp5fOMSn/DsVbXNhNG6HY
// SIG // +i+ePy5VFmvJE6P9MYIElzCCBJMCAQEwgZAweTELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0ECEzMAAAFAlqnucFb+zAcA
// SIG // AQAAAUAwCQYFKw4DAhoFAKCBsDAZBgkqhkiG9w0BCQMx
// SIG // DAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYK
// SIG // KwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQUZtpg4maL
// SIG // 9JPrSZ5x0QlxfgC+uG8wUAYKKwYBBAGCNwIBDDFCMECg
// SIG // JoAkAHMAYwByAGkAcAB0AGUAZABDAG8AbgB0AHIAbwBs
// SIG // AC4AagBzoRaAFGh0dHA6Ly9taWNyb3NvZnQuY29tMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAE4GU+F7FUebq/Y/yJA4b4aF
// SIG // hXILnHQcXVnoeazWON4cncS1QYGgM5pMKrLEUp5JNztb
// SIG // hzfgedExPU3u0OKLVe7NxyLTm/8JV2UvQEJES09FbFJS
// SIG // ztmH0cTLdGaffww1HGAuTcHcirjQAcz+C7q2d1EcWcFF
// SIG // pjdzvXyrgVtJcJBzFHV2OHn15nSEj07SyuEmIiqaPCTv
// SIG // vN1ts/uN0lmxp+nOO+6Ra2NuExV/Ku8m11XcZJ2shGNk
// SIG // 5+WFOz0f2jvZCwiu8a+Te+kT8BwyMc23StHik2fPmOli
// SIG // CrDyZdUJJCm7NPkS/v8wg42eugOlc5mXebSNskHAus0T
// SIG // EAdsY3q2/IShggIoMIICJAYJKoZIhvcNAQkGMYICFTCC
// SIG // AhECAQEwgY4wdzELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8G
// SIG // A1UEAxMYTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBAhMz
// SIG // AAAAxniANgF1GmlyAAAAAADGMAkGBSsOAwIaBQCgXTAY
// SIG // BgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3
// SIG // DQEJBTEPFw0xNzA2MTIyMjU0NTdaMCMGCSqGSIb3DQEJ
// SIG // BDEWBBQs8CqXqLLYfRHWxLp9JcAXCERjVjANBgkqhkiG
// SIG // 9w0BAQUFAASCAQCW9+Kic0QDjZEbiIipt2YtfL94WZgN
// SIG // RTWq04qtOM/Cv6lR59rWo92sQy8xdbisAddcTYuMcF+j
// SIG // kuj2LBEsQd0qT2F0j+lznUtMnq6hlwOqEIOKClk5b6l4
// SIG // p522Tw3eHik1AZi+NthscY2mXbJ2KTTh0wsmgUC2tCr7
// SIG // /zXMd/atxSvUM/Y7aJ3i2mIwYILBuyR5086Sm+NXFQr2
// SIG // bzv/YKTIOIot0QFCNFHPrDyMpjZ85f/2bkvaK+bVzWeW
// SIG // iVgaOntow6diTHEYusUdzAGJdSRRgP97gWx7xUPZRM3r
// SIG // uoW3tgLQ+Sg7NpUXjrICVpGnhVxG9jO674H0U23NMmfI
// SIG // Ap5Z
// SIG // End signature block
