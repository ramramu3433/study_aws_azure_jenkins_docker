import { IHostLibraryProviders } from "./interfaces/iHostLibraryProviders";
import { IJSONManifest } from "./common/iJSONManifest";
import { EventTarget, Event } from "./common/event";
import { PortMarshaler, SynchronousJsonPortMarshaler } from "./messaging/marshaler";
import { Port } from "./messaging/communication";
export declare class ScriptedControl extends EventTarget {
    private hostName;
    private static lastControlId;
    private communicationManager;
    private exportedObjects;
    iframe: HTMLIFrameElement | Electron.WebviewTag;
    private startUrl;
    private parameters;
    private useNativeWebView;
    private baseDirectory;
    private providers;
    constructor(hostName: string, jsonManifest: IJSONManifest, baseDirectory: string, parameters: {
        [name: string]: string;
    }, initInSeparateProcess: boolean, providers: IHostLibraryProviders);
    private createFrame(src, jsonManifest);
    getURLParameters(): string;
    reportError(message: string): void;
    createPort(name: string): Port;
    fireEvent(eventName: string, eventArgs: Event): void;
    publishObject(name: string, objectMarshaler: PortMarshaler): void;
    private controlClosed;
    close(): void;
    postMessageToPlugin(message: string): void;
    publishLibraryObjects(jsonManifest: IJSONManifest): void;
    private loadResourcesAndAlias(baseDirectory, aliases);
    private processMessage(message);
    processFocusEvent(): void;
    processBlurEvent(): void;
    createSynchronousJsonPortMarshaler(objDefinition: any): SynchronousJsonPortMarshaler;
}
