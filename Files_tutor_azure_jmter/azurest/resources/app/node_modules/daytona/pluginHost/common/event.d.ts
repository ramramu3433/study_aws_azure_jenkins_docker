export interface IEventListener {
    (source: IEventTarget, event: Event): void;
}
export interface IEvent {
    bubbles: boolean;
    cancelable: boolean;
    currentTarget: any;
    defaultPrevented: boolean;
    eventPhase: number;
    target: any;
    timeStamp: number;
    trusted: boolean;
    type: string;
    stopPropagation(): void;
    preventDefault(): void;
    stopImmediatePropagation(): void;
}
export interface IEventTarget {
    addEventListener(type: string, listener: IEventListener): void;
    removeEventListener(type: string, listener: IEventListener): void;
}
export declare class Event implements IEvent {
    NONE: number;
    CAPTURING_PHASE: number;
    AT_TARGET: number;
    BUBBLING_PHASE: number;
    private _preventDefaultCalled;
    currentTarget: any;
    bubbles: boolean;
    cancelable: boolean;
    eventPhase: number;
    target: any;
    timeStamp: number;
    trusted: boolean;
    type: string;
    stopPropagation(): void;
    stopImmediatePropagation(): void;
    readonly defaultPrevented: boolean;
    preventDefault(): void;
}
export declare class EventTarget implements IEventTarget {
    listeners: {
        [type: string]: {
            listener: IEventListener;
        }[];
    };
    addEventListener(type: string, listener: IEventListener): void;
    removeEventListener(type: string, listener: IEventListener): void;
    dispatchEvent(type: string, eventArg: Event): boolean;
}
