{"version":3,"sources":["../pluginHost/common/fileOptions.ts"],"names":[],"mappings":"AAAA;;4DAE4D;AAC5D,YAAY,CAAC;;AACb,IAAY,UAIX;AAJD,WAAY,UAAU;IAClB,2CAAQ,CAAA;IACR,6CAAS,CAAA;IACT,qDAAa,CAAA;AACjB,CAAC,EAJW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAIrB;AAED,IAAY,QAkBX;AAlBD,WAAY,QAAQ;IAChB,gEAAgE;IAChE,iDAAa,CAAA;IAEb,yEAAyE;IACzE,2CAAU,CAAA;IAEV,mEAAmE;IACnE,uCAAQ,CAAA;IAER,mEAAmE;IACnE,uDAAgB,CAAA;IAEhB,uGAAuG;IACvG,+CAAY,CAAA;IAEZ,uFAAuF;IACvF,2CAAU,CAAA;AACd,CAAC,EAlBW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAkBnB;AAED,IAAY,SAeX;AAfD,WAAY,SAAS;IACjB,yGAAyG;IACzG,yCAAQ,CAAA;IAER,oDAAoD;IACpD,yCAAQ,CAAA;IAER,qDAAqD;IACrD,2CAAS,CAAA;IAET,gEAAgE;IAChE,mDAAa,CAAA;IAEb,uCAAuC;IACvC,6CAAU,CAAA;AACd,CAAC,EAfW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAepB;AAED,IAAY,QAGX;AAHD,WAAY,QAAQ;IAChB,2CAAU,CAAA;IACV,uCAAQ,CAAA;AACZ,CAAC,EAHW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGnB;AAED,IAAY,eAGX;AAHD,WAAY,eAAe;IACvB,+DAAa,CAAA;IACb,+DAAa,CAAA;AACjB,CAAC,EAHW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAG1B","file":"common/fileOptions.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n'use strict';\r\nexport enum FileAccess {\r\n    read = 1,\r\n    write = 2,\r\n    readWrite = 3\r\n}\r\n\r\nexport enum FileMode {\r\n    // Create a new file. Throw an error if the file already exists.\r\n    createNew = 1,\r\n\r\n    // Create a new file. If the file already exists, it will be overwritten.\r\n    create = 2,\r\n\r\n    // Open an existing file. Throw an error if the file doesn't exist.\r\n    open = 3,\r\n\r\n    // Open a file if it exists; otherwise, a new file will be created.\r\n    openOrCreate = 4,\r\n\r\n    // Open an existing file. When the file is opened, it will be truncated so that its size is zero bytes.\r\n    truncate = 5,\r\n\r\n    // Opens the file if it exists and seeks to the end of the file, or creates a new file.\r\n    append = 6\r\n}\r\n\r\nexport enum FileShare {\r\n    // Declines sharing of the current file. Any request to open the file will fail until the file is closed.\r\n    none = 0,\r\n\r\n    // Allows subsequent opening of the file for reading\r\n    read = 1,\r\n\r\n    // Allows subsequent opening of the file for writing.\r\n    write = 2,\r\n\r\n    // Allows subsequent opening of the file for reading or writing.\r\n    readWrite = 3,\r\n\r\n    // Allows subsequent deleting of a file\r\n    delete = 4\r\n}\r\n\r\nexport enum FileType {\r\n    binary = 0,\r\n    text = 1\r\n}\r\n\r\nexport enum FilePersistence {\r\n    permanent = 0,\r\n    temporary = 1\r\n}\r\n\r\nexport interface FileOptions {\r\n    // A constant that determines how the file can be accessed.\r\n    access?: FileAccess;\r\n\r\n    // The character encoding to use for read and write text file operations.\r\n    encoding?: string;\r\n\r\n    // A constant that specifies how the file should be opened.\r\n    mode?: FileMode;\r\n\r\n    // A constant that specifies how the file should be shared.\r\n    share?: FileShare;\r\n\r\n    // A constant that determines if the file is stored permanently or temporarily.\r\n    persistence?: FilePersistence;\r\n\r\n    // A constant that determines if the file is a binary or text file.\r\n    type?: FileType;\r\n}"],"sourceRoot":"/source/"}