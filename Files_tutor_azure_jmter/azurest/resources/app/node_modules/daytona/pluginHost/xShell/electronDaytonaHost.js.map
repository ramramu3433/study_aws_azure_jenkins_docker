{"version":3,"sources":["../pluginHost/xShell/electronDaytonaHost.ts"],"names":[],"mappings":"AAAA;;4DAE4D;AAC5D,YAAY,CAAC;;;;;;;;;;;;AAEb,2BAA8B;AAU9B,4CAA+C;AAG/C,+CAA4C;AAC5C,6CAA0C;AAC1C,yDAAsD;AACtD,iDAA8C;AAC9C,qDAAkD;AAElD;IAAkC,gCAAuB;IAErD,sBAAY,MAAmB,EAAE,YAAoB,EAAE,cAAsB,EAAE,UAA2C;QAA3C,2BAAA,EAAA,eAA2C;QAA1H,iBAUC;QARG,IAAI,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;QAC3D,IAAI,WAAW,GAAG,SAAS,CAAC;QAC5B,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAClB,cAAc,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,IAAI,OAAO,GAAG,CAAO,SAAU,CAAC,YAAY,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAA;QACnE,QAAA,kBAAM,uCAAuC,EAAE,MAAM,EAAE,YAAY,EAAE,mBAAmB,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,EAAE,UAAU,CAAC,SAAC;;IAChJ,CAAC;IAEM,4BAAK,GAAZ;QACI,iBAAM,KAAK,WAAE,CAAC;IAClB,CAAC;IAEM,yCAAkB,GAAzB,UAA0B,OAAe,EAAE,OAAe;QACtD,MAAM,CAAC,EAAE,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IACvG,CAAC;IAEM,kCAAW,GAAlB,UAAmB,QAAgB;QAC/B,EAAE,CAAA,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAES,sCAAe,GAAzB;QACI,MAAM,CAAC,IAAI,2BAAY,EAAE,CAAC;IAC9B,CAAC;IAES,qCAAc,GAAxB;QACI,MAAM,CAAC,IAAI,yBAAW,EAAE,CAAC;IAC7B,CAAC;IAES,2CAAoB,GAA9B;QACI,MAAM,CAAC,IAAI,qCAAiB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACzE,CAAC;IAES,uCAAgB,GAA1B;QACI,MAAM,CAAC,IAAI,6BAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5F,CAAC;IAES,yCAAkB,GAA5B;QACI,MAAM,CAAC,IAAI,iCAAe,EAAE,CAAC;IACjC,CAAC;IACL,mBAAC;AAAD,CAjDA,AAiDC,CAjDiC,WAAW,CAAC,WAAW,GAiDxD;AAjDY,oCAAY","file":"xShell/electronDaytonaHost.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n\"use strict\";\r\nimport fs = require('fs');\r\nimport Path = require('path');\r\nimport { Promise } from 'q'\r\nimport Q = require('q');\r\nimport {IFileProvider} from \"../interfaces/iFileProvider\";\r\nimport {ILogProvider} from \"../interfaces/iLogProvider\";\r\nimport {IResourcesProvider} from \"../interfaces/iResourcesProvider\";\r\nimport {IThemeProvider} from \"../interfaces/iThemeProvider\";\r\nimport {IStorageProvider} from \"../interfaces/iStorageProvider\";\r\nimport {StorageMarshaler} from \"../messaging/storageMarshaler\";\r\nimport {PopupDisplayParameters} from \"../common/popupDisplayParameters\";\r\nimport DaytonaHost = require('../daytonaHost');\r\nimport ScriptedControl = require('../scriptedControl');\r\nimport {JsonPortMarshaler} from \"../messaging/marshaler\";\r\nimport {FileProvider} from \"./fileProvider\";\r\nimport {LogProvider} from \"./logProvider\";\r\nimport {ResourcesProvider} from \"./resourcesProvider\";\r\nimport {ThemeProvider} from \"./themeProvider\";\r\nimport {StorageProvider} from \"./storageProvider\";\r\n\r\nexport class ElectronHost extends DaytonaHost.DaytonaHost {\r\n\r\n    constructor(parent: HTMLElement, manifestFile: string, themeDirectory: string, parameters: { [name: string]: string } = {}) {\r\n\r\n        var pluginBaseDirectory = Path.dirname(manifestFile) + '/';\r\n        var baseThemeId = 'default';\r\n        if (!themeDirectory) {\r\n            themeDirectory = \"./theme\";\r\n        }\r\n\r\n        var culture = ((<any>navigator).userLanguage || navigator.language)\r\n        super('Microsoft Visual Studio Native Client', parent, manifestFile, pluginBaseDirectory, baseThemeId, culture, themeDirectory, parameters);\r\n    }\r\n\r\n    public close(): void {\r\n        super.close();\r\n    }\r\n\r\n    public pluginToPageCoords(pluginX: number, pluginY: number): { x: number; y: number; } {\r\n        return { x: pluginX + this.control.iframe.offsetLeft, y: pluginY + this.control.iframe.offsetTop };\r\n    }\r\n\r\n    public updateTheme(newTheme: string): void {\r\n        if(!newTheme || newTheme.length === 0) {\r\n            throw new Error(\"Theme name cannot be empty\");\r\n        }\r\n\r\n        this.themeProvider.updateTheme(newTheme);\r\n    }\r\n\r\n    protected getFileProvider(): IFileProvider {\r\n        return new FileProvider();\r\n    }\r\n\r\n    protected getLogProvider(): ILogProvider {\r\n        return new LogProvider();\r\n    }\r\n\r\n    protected getResourcesProvider(): IResourcesProvider {\r\n        return new ResourcesProvider(this.fileProvider, this.defaultCulture);\r\n    }\r\n\r\n    protected getThemeProvider(): IThemeProvider {\r\n        return new ThemeProvider(this.fileProvider, this.themeBaseDirectory, this.defaultTheme);\r\n    }\r\n\r\n    protected getStorageProvider(): IStorageProvider {\r\n        return new StorageProvider();\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}