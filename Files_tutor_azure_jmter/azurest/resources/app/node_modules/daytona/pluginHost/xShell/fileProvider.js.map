{"version":3,"sources":["../pluginHost/xShell/fileProvider.ts"],"names":[],"mappings":"AAAA;;4DAE4D;AAC5D,YAAY,CAAC;;AAEb,uBAAyB;AACzB,uBAA0B;AAG1B;IAAA;IAgCA,CAAC;IA/BU,sCAAe,GAAtB,UAAuB,IAAY;QAAnC,iBAgBC;QAfG,MAAM,CAAC,WAAO,CAAS,UACnB,OAA8B,EAC9B,MAA6B;YAC7B,IAAI,YAAY,GAAG,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAClD,EAAE,CAAC,QAAQ,CACP,YAAY,EACZ,EAAE,IAAI,EAAE,GAAG,EAAE,EACb,UAAC,GAA0B,EAAE,IAAY;gBACrC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC7B,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,0CAAmB,GAA1B,UAA2B,QAAgB;QACvC,kDAAkD;QAClD,+EAA+E;QAC/E,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/D,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,gEAAgE;YAChE,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC;gBAC/B,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;YAC9B,CAAC;QACL,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IACL,mBAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,oCAAY","file":"xShell/fileProvider.js","sourcesContent":["/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\n\"use strict\";\r\n\r\nimport * as fs from \"fs\";\r\nimport {Promise} from \"q\";\r\nimport {IFileProvider} from \"../interfaces/IFileProvider\";\r\n\r\nexport class FileProvider implements IFileProvider {\r\n    public getFileContents(path: string): Promise<string> {\r\n        return Promise<string>((\r\n            resolve: (val: string) => void,\r\n            reject: (reason: any) => void) => {\r\n            var resolvedPath = this.getResolvedFilePath(path);\r\n            fs.readFile(\r\n                resolvedPath,\r\n                { flag: 'r' },\r\n                (err: NodeJS.ErrnoException, data: Buffer) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(data.toString());\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    public getResolvedFilePath(filePath: string): string {\r\n        // Convert to absolute path if the given path is a\r\n        // url with the file protocol. i.e.: \"file:///C:\\MyFile.txt\" to \"C:\\MyFile.txt\"\r\n        if (filePath && filePath.toLowerCase().indexOf(\"file:///\") === 0) {\r\n            filePath = decodeURI(filePath.substring(8, filePath.length));\r\n            // If not running on windows we need to append the root / again.\r\n            if (process.platform !== 'win32') {\r\n                filePath = '/' + filePath;\r\n            }\r\n        }\r\n\r\n        return filePath;\r\n    }\r\n}"],"sourceRoot":"/source/"}