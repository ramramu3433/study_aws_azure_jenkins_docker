import { Promise } from 'q';
import { IStorageProvider } from "../interfaces/iStorageProvider";
import { FileDialogMode, FileDialogOptions } from "../common/fileDialogOptions";
import { FileOptions, FilePersistence } from "../common/fileOptions";
import { SeekOrigin } from "../common/seekOrigin";
export declare const PermenantStorageRootPath: string;
export declare const TemporaryStorageRootPath: string;
export declare class StorageProvider implements IStorageProvider {
    private openFiles;
    constructor();
    close(streamId: string): Promise<void>;
    fileDialog(mode: FileDialogMode, dialogOptions: FileDialogOptions, fileOptions?: FileOptions): Promise<string>;
    getFileList(path?: string, persistence?: FilePersistence, index?: number, count?: number): Promise<string[]>;
    openFile(path?: string, options?: FileOptions): Promise<string>;
    readBinary(streamId: string, count: number): Promise<any>;
    readText(streamId: string, count: number): Promise<any>;
    seek(streamId: string, offset: number, origin: SeekOrigin): Promise<number>;
    writeBinary(streamId: string, data: any, offset: number, count: number): Promise<void>;
    writeText(streamId: string, data: any, offset: number, count: number): Promise<void>;
    /**
     * Gets the file filters for file dialog
     */
    private getFileFilters(extensions);
    private openFirstSelectedFileFromDialog(fileNames, fileOptions, deferrer);
    private showOpenDialog(title, defaultPath, filters, fileOptions);
    private showSaveDialog(title, defaultPath, filters, fileOptions);
    private readFile(streamId, count);
    private createFileContent(info, encoding);
    private buildBinaryData(data);
    private buildStringDate(data);
    private writeFile(info, data);
}
/**
 * Checks if a path exists
 */
export declare function pathExists(path: string): boolean;
/**
 * Normalizes a path.
 * It will take care of multiple slashes, ".." and ".", change all "\\" to "/", and delete trailing slash.
 */
export declare function normalizePath(path: string): string;
/**
 * Checks if a path is pointing to a file
 */
export declare function isFile(path: string): boolean;
/**
 * Gets a location based on root storage location.
 */
export declare function getStorageLocation(path: string, persistence: FilePersistence): string;
/**
 * Gets temporary or permanent root storage location
 */
export declare function getRootStorageLocation(persistence: FilePersistence): string;
/**
 * Generates randome file name with .tmp extension
 */
export declare function generateRandomName(): string;
