/// <reference types="node" />
/// <reference types="q" />
/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
import { EventEmitter } from "events";
import { Promise } from "q";
import * as index from "../index";
import * as manager from "../manager";
declare abstract class AccountStore extends EventEmitter implements manager.AccountStore {
    private baseline;
    private activeOperation;
    private doOperation<T>(op);
    protected abstract readAccounts(): any;
    private getAccounts(refresh?);
    query(query?: index.AccountQuery): Promise<index.Account[]>;
    protected abstract writeAccounts(accounts: index.Account[]): any;
    private mutateAccounts<T>(mutate);
    addOrUpdate(account: index.Account): Promise<index.Account>;
    private updateAccount(key, displayInfo?, properties?, stale?);
    updateDisplayInfo(key: index.AccountKey, displayInfo: index.AccountDisplayInfo): Promise<index.Account>;
    updateProperties(key: index.AccountKey, properties: any): Promise<index.Account>;
    updateState(key: index.AccountKey, stale: boolean): Promise<index.Account>;
    remove(key: index.AccountKey): Promise<boolean>;
    protected onAccountsChanged(): void;
    addListener(event: "change", listener: index.AccountStoreChangeListener): this;
    listeners(event: "change"): index.AccountStoreChangeListener[];
}
export default AccountStore;
