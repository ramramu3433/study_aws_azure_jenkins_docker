/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require("events");
var q_1 = require("q");
var Q = require("q");
function select(accounts, providerId, providerArgs, accountId) {
    var indexes = [];
    accounts.forEach(function (account, index) {
        // Filter on the provider ID if supplied
        if (providerId && account.key.providerId !== providerId) {
            return;
        }
        // Filter on the provider arguments if supplied
        if (providerArgs) {
            if (!account.key.providerArgs) {
                return;
            }
            for (var key in providerArgs) {
                if (account.key.providerArgs[key] !== providerArgs[key]) {
                    return;
                }
            }
        }
        // Filter on the account ID if supplied
        if (accountId && account.key.accountId !== accountId) {
            return;
        }
        indexes.push(index);
    });
    return indexes;
}
function insert(accounts, account) {
    accounts.push(account);
    return account;
}
function merge(account, displayInfo, properties, stale) {
    var newAccount = {
        key: account.key,
        name: account.name,
        displayInfo: account.displayInfo,
        properties: account.properties,
        stale: account.stale
    }, hasChanges = false;
    // Take any display info changes
    if (displayInfo && account.displayInfo !== displayInfo) {
        if (account.displayInfo.contextualLogo !== displayInfo.contextualLogo ||
            account.displayInfo.contextualDisplayName !== displayInfo.contextualDisplayName ||
            account.displayInfo.displayName !== displayInfo.displayName) {
            newAccount.displayInfo = displayInfo;
            hasChanges = true;
        }
    }
    // Merge any changes to the properties
    if (properties && account.properties !== properties) {
        // Make a shallow copy of the original properties, if any
        newAccount.properties = {};
        if (account.properties) {
            for (var key in account.properties) {
                if (Object.prototype.hasOwnProperty.call(account.properties, key)) {
                    newAccount.properties[key] = account.properties[key];
                }
            }
        }
        // Add new properties or update or remove original properties
        for (var key in properties) {
            if (typeof properties[key] !== "undefined") {
                // TODO: recursively check arrays and objects for equality
                if (newAccount.properties[key] !== properties[key]) {
                    // Add new property or update original property
                    newAccount.properties[key] = properties[key];
                    hasChanges = true;
                }
            }
            else {
                // Remove original property
                delete newAccount.properties[key];
                hasChanges = true;
            }
        }
    }
    // Take any state changes
    if (typeof stale === "boolean") {
        if (account.stale !== stale) {
            newAccount.stale = stale;
            hasChanges = true;
        }
    }
    return hasChanges ? newAccount : null;
}
function update(accounts, index, displayInfo, properties, stale) {
    var updatedAccount = merge(accounts[index], displayInfo, properties, stale);
    if (updatedAccount) {
        accounts[index] = updatedAccount;
    }
    return accounts[index];
}
function sync(baseline, latest, store) {
    if (!baseline) {
        // No baseline yet; take the latest
        return latest;
    }
    var changes = {
        added: [],
        modified: [],
        removed: []
    }, result = [];
    // Handle new and modified accounts
    for (var i = 0; i < latest.length; i++) {
        var key = latest[i].key, indexes = select(baseline, key.providerId, key.providerArgs, key.accountId);
        if (!indexes.length) {
            // Account only exists in latest
            changes.added.push(latest[i]);
            result.push(latest[i]);
        }
        else {
            // Account exists in baseline and latest
            var baselineAccount = baseline[indexes[0]], mergedAccount = merge(baselineAccount, latest[i].displayInfo, latest[i].properties, latest[i].stale);
            if (mergedAccount) {
                // Baseline and latest accounts differed and produced a new, merged account
                changes.modified.push({ before: baselineAccount, after: mergedAccount });
            }
            result.push(mergedAccount || baselineAccount);
        }
    }
    // Handle deleted accounts
    for (var i = 0; i < baseline.length; i++) {
        var key = baseline[i].key, indexes = select(latest, key.providerId, key.providerArgs, key.accountId);
        if (!indexes.length) {
            // Account only exists in baseline
            changes.removed.push(baseline[i]);
        }
    }
    // Asynchronously emit change event if there were any changes
    if (changes.added.length || changes.modified.length || changes.removed.length) {
        setTimeout(function () { return store.emit("change", changes); }, 0);
    }
    // Return the new baseline
    return result;
}
var AccountStore = (function (_super) {
    __extends(AccountStore, _super);
    function AccountStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccountStore.prototype.doOperation = function (op) {
        var _this = this;
        var activeOperation = this.activeOperation || Q.resolve(null);
        activeOperation = activeOperation.then(op).fin(function () {
            if (_this.activeOperation === activeOperation) {
                _this.activeOperation = null;
            }
        });
        this.activeOperation = activeOperation;
        return this.activeOperation;
    };
    AccountStore.prototype.getAccounts = function (refresh) {
        var _this = this;
        if (!this.baseline || refresh) {
            // Read accounts and refresh baseline
            return this.readAccounts().then(function (accounts) {
                _this.baseline = sync(_this.baseline, accounts, _this);
                return _this.baseline;
            });
        }
        return Q.resolve(this.baseline);
    };
    AccountStore.prototype.query = function (query) {
        var _this = this;
        query = query || {};
        return this.doOperation(function () { return _this.getAccounts().then(function (accounts) {
            return select(accounts, query.providerId, query.providerArgs, query.accountId).map(function (i) { return accounts[i]; });
        }); });
    };
    AccountStore.prototype.mutateAccounts = function (mutate) {
        var _this = this;
        // A mutation first refreshes the baseline with the latest accounts
        // and then applies the mutation operation on top of this baseline.
        return this.doOperation(function () { return _this.getAccounts(true).then(function (accounts) {
            // Shallow copy the accounts array before the mutation
            // so that it is an isolated mutation until committed.
            var result = mutate(accounts = accounts.slice());
            return _this.writeAccounts(accounts).then(function () {
                // Update the baseline with the mutated accounts
                _this.baseline = sync(_this.baseline, accounts, _this);
                return result;
            });
        }); });
    };
    AccountStore.prototype.addOrUpdate = function (account) {
        return this.mutateAccounts(function (accounts) {
            var key = account.key, indexes = select(accounts, key.providerId, key.providerArgs, key.accountId);
            if (indexes.length > 1) {
                // Cannot update multiple accounts
                return null;
            }
            if (!indexes.length) {
                // No matching account found; insert new one
                return insert(accounts, account);
            }
            else {
                // Update the matching account
                return update(accounts, indexes[0], account.displayInfo, account.properties, account.stale);
            }
        });
    };
    AccountStore.prototype.updateAccount = function (key, displayInfo, properties, stale) {
        return this.mutateAccounts(function (accounts) {
            var indexes = select(accounts, key.providerId, key.providerArgs, key.accountId);
            if (indexes.length !== 1) {
                // No matching account found to update
                return null;
            }
            return update(accounts, indexes[0], displayInfo, properties, stale);
        });
    };
    AccountStore.prototype.updateDisplayInfo = function (key, displayInfo) {
        return this.updateAccount(key, displayInfo);
    };
    AccountStore.prototype.updateProperties = function (key, properties) {
        return this.updateAccount(key, null, properties);
    };
    AccountStore.prototype.updateState = function (key, stale) {
        return this.updateAccount(key, null, null, stale);
    };
    AccountStore.prototype.remove = function (key) {
        var _this = this;
        return q_1.Promise(function (resolve) {
            return _this.mutateAccounts(function (accounts) {
                var indexes = select(accounts, key.providerId, key.providerArgs, key.accountId);
                if (indexes.length !== 1) {
                    // No matching account found to remove
                    resolve(false);
                }
                accounts.splice(indexes[0], 1);
                resolve(true);
            });
        });
    };
    AccountStore.prototype.onAccountsChanged = function () {
        var _this = this;
        // Refresh the list of accounts, which will synchronize the baseline,
        // which will emit a change event if any changes were actually made.
        this.doOperation(function () { return _this.getAccounts(true); });
    };
    AccountStore.prototype.addListener = function (event, listener) {
        return _super.prototype.addListener.call(this, event, listener);
    };
    AccountStore.prototype.listeners = function (event) {
        return _super.prototype.listeners.call(this, event);
    };
    return AccountStore;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AccountStore;

//# sourceMappingURL=data:application/json;base64,
