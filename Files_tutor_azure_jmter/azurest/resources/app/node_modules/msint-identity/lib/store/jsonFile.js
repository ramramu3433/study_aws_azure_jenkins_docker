/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fs = require("fs");
var q_1 = require("q");
var base_1 = require("./base");
var util_1 = require("../util");
var JsonFileAccountStore = (function (_super) {
    __extends(JsonFileAccountStore, _super);
    function JsonFileAccountStore(dir, filename, noProbe) {
        var _this = _super.call(this) || this;
        // Get the fully-qualified filename to use
        _this.filename = util_1.createIfNotExists(filename || ".accounts", dir, noProbe);
        // Watch the file for changes
        fs.watch(_this.filename, function () { return _this.onAccountsChanged(); });
        return _this;
    }
    JsonFileAccountStore.prototype.readAccounts = function () {
        var _this = this;
        return q_1.Promise(function (resolve) {
            // NOTE: this is NOT an atomic read, and therefore may produce a
            // partial or otherwise invalid file (hence all the error checking).
            // However, such race conditions are extremely unlikely to occur.
            fs.readFile(_this.filename, "utf8", function (err, data) {
                var accounts;
                if (err) {
                    // Ignore read errors
                    data = "";
                }
                try {
                    // Parse the data
                    accounts = JSON.parse(data || "[]");
                }
                catch (e) {
                    // Disregard invalid JSON
                    accounts = [];
                }
                if (!Array.isArray(accounts)) {
                    // Disregard invalid data
                    accounts = [];
                }
                // Perform sanity checks on each account
                for (var i = 0; i < accounts.length; i++) {
                    if (!accounts[i].key ||
                        typeof accounts[i].key !== "object" ||
                        typeof accounts[i].key.providerId !== "string" ||
                        typeof accounts[i].key.accountId !== "string" ||
                        typeof accounts[i].name !== "string" ||
                        !accounts[i].displayInfo ||
                        typeof accounts[i].displayInfo !== "object" ||
                        typeof accounts[i].displayInfo.contextualDisplayName !== "string" ||
                        typeof accounts[i].displayInfo.displayName !== "string" ||
                        typeof accounts[i].stale !== "boolean") {
                        // Disregard invalid account
                        accounts.splice(i, 1);
                        i--;
                    }
                }
                resolve(accounts);
            });
        });
    };
    JsonFileAccountStore.prototype.writeAccounts = function (accounts) {
        var _this = this;
        return q_1.Promise(function (resolve) {
            // NOTE: this is NOT a transacted write, and therefore may clobber
            // changes to the file that have been made since the last baseline
            // update. However, because the store updates its baseline to the
            // latest from disk immediately before performing a mutation, after
            // which the result is immediately written to disk, it is extremely
            // unlikely that this kind of clobbering will occur.
            fs.writeFile(_this.filename, JSON.stringify(accounts, null, 4), function () {
                // Ignore errors
                resolve(null);
            });
        });
    };
    return JsonFileAccountStore;
}(base_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = JsonFileAccountStore;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdG9yZS9qc29uRmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OERBRThEO0FBRTlELFlBQVksQ0FBQzs7Ozs7O0FBRWIsdUJBQXlCO0FBQ3pCLHVCQUE0QjtBQUc1QiwrQkFBa0M7QUFDbEMsZ0NBQTRDO0FBRTVDO0lBQWtELHdDQUFZO0lBRzFELDhCQUFZLEdBQVksRUFBRSxRQUFpQixFQUFFLE9BQWlCO1FBQTlELFlBQ0ksaUJBQU8sU0FPVjtRQUxHLDBDQUEwQztRQUMxQyxLQUFJLENBQUMsUUFBUSxHQUFHLHdCQUFpQixDQUFDLFFBQVEsSUFBSSxXQUFXLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXpFLDZCQUE2QjtRQUM3QixFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUksQ0FBQyxRQUFRLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUF4QixDQUF3QixDQUFDLENBQUM7O0lBQzVELENBQUM7SUFFUywyQ0FBWSxHQUF0QjtRQUFBLGlCQStDQztRQTlDRyxNQUFNLENBQUMsV0FBTyxDQUFrQixVQUFBLE9BQU87WUFDbkMsZ0VBQWdFO1lBQ2hFLG9FQUFvRTtZQUNwRSxpRUFBaUU7WUFDakUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxVQUFDLEdBQUcsRUFBRSxJQUFJO2dCQUN6QyxJQUFJLFFBQXlCLENBQUM7Z0JBRTlCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ04scUJBQXFCO29CQUNyQixJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNkLENBQUM7Z0JBRUQsSUFBSSxDQUFDO29CQUNELGlCQUFpQjtvQkFDakIsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2dCQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1QseUJBQXlCO29CQUN6QixRQUFRLEdBQUcsRUFBRSxDQUFDO2dCQUNsQixDQUFDO2dCQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLHlCQUF5QjtvQkFDekIsUUFBUSxHQUFHLEVBQUUsQ0FBQztnQkFDbEIsQ0FBQztnQkFFRCx3Q0FBd0M7Z0JBQ3hDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUN2QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO3dCQUNoQixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssUUFBUTt3QkFDbkMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxRQUFRO3dCQUM5QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLFFBQVE7d0JBQzdDLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRO3dCQUNwQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXO3dCQUN4QixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssUUFBUTt3QkFDM0MsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLHFCQUFxQixLQUFLLFFBQVE7d0JBQ2pFLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssUUFBUTt3QkFDdkQsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7d0JBQ3pDLDRCQUE0Qjt3QkFDNUIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ3RCLENBQUMsRUFBRSxDQUFDO29CQUNSLENBQUM7Z0JBQ0wsQ0FBQztnQkFFRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFUyw0Q0FBYSxHQUF2QixVQUF3QixRQUF5QjtRQUFqRCxpQkFhQztRQVpHLE1BQU0sQ0FBQyxXQUFPLENBQU8sVUFBQSxPQUFPO1lBQ3hCLGtFQUFrRTtZQUNsRSxrRUFBa0U7WUFDbEUsaUVBQWlFO1lBQ2pFLG1FQUFtRTtZQUNuRSxtRUFBbUU7WUFDbkUsb0RBQW9EO1lBQ3BELEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQzNELGdCQUFnQjtnQkFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQTVFQSxBQTRFQyxDQTVFaUQsY0FBWSxHQTRFN0QiLCJmaWxlIjoic3RvcmUvanNvbkZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChDKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgeyBQcm9taXNlIH0gZnJvbSBcInFcIjtcclxuXHJcbmltcG9ydCAqIGFzIGluZGV4IGZyb20gXCIuLi9pbmRleFwiO1xyXG5pbXBvcnQgQWNjb3VudFN0b3JlIGZyb20gXCIuL2Jhc2VcIjtcclxuaW1wb3J0IHsgY3JlYXRlSWZOb3RFeGlzdHMgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSnNvbkZpbGVBY2NvdW50U3RvcmUgZXh0ZW5kcyBBY2NvdW50U3RvcmUge1xyXG4gICAgcHJpdmF0ZSBmaWxlbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRpcj86IHN0cmluZywgZmlsZW5hbWU/OiBzdHJpbmcsIG5vUHJvYmU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBmdWxseS1xdWFsaWZpZWQgZmlsZW5hbWUgdG8gdXNlXHJcbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IGNyZWF0ZUlmTm90RXhpc3RzKGZpbGVuYW1lIHx8IFwiLmFjY291bnRzXCIsIGRpciwgbm9Qcm9iZSk7XHJcblxyXG4gICAgICAgIC8vIFdhdGNoIHRoZSBmaWxlIGZvciBjaGFuZ2VzXHJcbiAgICAgICAgZnMud2F0Y2godGhpcy5maWxlbmFtZSwgKCkgPT4gdGhpcy5vbkFjY291bnRzQ2hhbmdlZCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZEFjY291bnRzKCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlPGluZGV4LkFjY291bnRbXT4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIC8vIE5PVEU6IHRoaXMgaXMgTk9UIGFuIGF0b21pYyByZWFkLCBhbmQgdGhlcmVmb3JlIG1heSBwcm9kdWNlIGFcclxuICAgICAgICAgICAgLy8gcGFydGlhbCBvciBvdGhlcndpc2UgaW52YWxpZCBmaWxlIChoZW5jZSBhbGwgdGhlIGVycm9yIGNoZWNraW5nKS5cclxuICAgICAgICAgICAgLy8gSG93ZXZlciwgc3VjaCByYWNlIGNvbmRpdGlvbnMgYXJlIGV4dHJlbWVseSB1bmxpa2VseSB0byBvY2N1ci5cclxuICAgICAgICAgICAgZnMucmVhZEZpbGUodGhpcy5maWxlbmFtZSwgXCJ1dGY4XCIsIChlcnIsIGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBhY2NvdW50czogaW5kZXguQWNjb3VudFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmVhZCBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMgPSBKU09OLnBhcnNlKGRhdGEgfHwgXCJbXVwiKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBEaXNyZWdhcmQgaW52YWxpZCBKU09OXHJcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWNjb3VudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcmVnYXJkIGludmFsaWQgZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRzID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBzYW5pdHkgY2hlY2tzIG9uIGVhY2ggYWNjb3VudFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY2NvdW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWNjb3VudHNbaV0ua2V5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhY2NvdW50c1tpXS5rZXkgIT09IFwib2JqZWN0XCIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFjY291bnRzW2ldLmtleS5wcm92aWRlcklkICE9PSBcInN0cmluZ1wiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhY2NvdW50c1tpXS5rZXkuYWNjb3VudElkICE9PSBcInN0cmluZ1wiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhY2NvdW50c1tpXS5uYW1lICE9PSBcInN0cmluZ1wiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICFhY2NvdW50c1tpXS5kaXNwbGF5SW5mbyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYWNjb3VudHNbaV0uZGlzcGxheUluZm8gIT09IFwib2JqZWN0XCIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFjY291bnRzW2ldLmRpc3BsYXlJbmZvLmNvbnRleHR1YWxEaXNwbGF5TmFtZSAhPT0gXCJzdHJpbmdcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYWNjb3VudHNbaV0uZGlzcGxheUluZm8uZGlzcGxheU5hbWUgIT09IFwic3RyaW5nXCIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFjY291bnRzW2ldLnN0YWxlICE9PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNyZWdhcmQgaW52YWxpZCBhY2NvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFjY291bnRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHdyaXRlQWNjb3VudHMoYWNjb3VudHM6IGluZGV4LkFjY291bnRbXSkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIE5PVCBhIHRyYW5zYWN0ZWQgd3JpdGUsIGFuZCB0aGVyZWZvcmUgbWF5IGNsb2JiZXJcclxuICAgICAgICAgICAgLy8gY2hhbmdlcyB0byB0aGUgZmlsZSB0aGF0IGhhdmUgYmVlbiBtYWRlIHNpbmNlIHRoZSBsYXN0IGJhc2VsaW5lXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZS4gSG93ZXZlciwgYmVjYXVzZSB0aGUgc3RvcmUgdXBkYXRlcyBpdHMgYmFzZWxpbmUgdG8gdGhlXHJcbiAgICAgICAgICAgIC8vIGxhdGVzdCBmcm9tIGRpc2sgaW1tZWRpYXRlbHkgYmVmb3JlIHBlcmZvcm1pbmcgYSBtdXRhdGlvbiwgYWZ0ZXJcclxuICAgICAgICAgICAgLy8gd2hpY2ggdGhlIHJlc3VsdCBpcyBpbW1lZGlhdGVseSB3cml0dGVuIHRvIGRpc2ssIGl0IGlzIGV4dHJlbWVseVxyXG4gICAgICAgICAgICAvLyB1bmxpa2VseSB0aGF0IHRoaXMga2luZCBvZiBjbG9iYmVyaW5nIHdpbGwgb2NjdXIuXHJcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZSh0aGlzLmZpbGVuYW1lLCBKU09OLnN0cmluZ2lmeShhY2NvdW50cywgbnVsbCwgNCksICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvcnNcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
