/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var fs = require("fs");
var path = require("path");
function createIfNotExists(filename, dir, noProbe) {
    var result;
    // Probe if not otherwise specified
    if (!noProbe) {
        // Start from the current working directory if not otherwise specified
        dir = dir || process.cwd();
        // Search from the specified directory up to the root
        while (dir) {
            result = path.join(dir, filename);
            if (fs.existsSync(result)) {
                // Found an existing file
                break;
            }
            // No file found in this directory
            result = null;
            // Move to the parent directory
            var parentDir = path.resolve(dir, "..");
            if (parentDir === dir) {
                // Reached the root directory; probe was unsuccessful
                dir = null;
                break;
            }
            dir = parentDir;
        }
    }
    // Ensure there is a directory
    var location = "default location";
    if (!dir) {
        if (process.env.HOME !== undefined) {
            dir = process.env.HOME;
            location = "HOME environment variable";
        }
        else if (process.env.HOMEDRIVE && process.env.HOMEPATH) {
            dir = process.env.HOMEDRIVE + process.env.HOMEPATH;
            location = "HOMEDRIVE and HOMEPATH environment variables";
        }
    }
    if (!dir) {
        throw new Error("Could not find default storage directory." +
            "Ensure the following environment variables are set and point to a writable location." +
            " Variables: HOME and/or HOMEDRIVE and HOMEPATH.");
    }
    if (!fs.existsSync(dir)) {
        throw new Error("Could not find default storage directory '" +
            dir +
            "' from the " +
            location +
            ". Please ensure this directory exists and is writable.");
    }
    // Ensure there is a result
    if (!result) {
        result = path.join(dir, filename);
    }
    // Ensure the file exists
    if (!fs.existsSync(result)) {
        // Create an empty file, or, if another process
        // happened to create the file during this short
        // time period, effectively perform a no-op.
        fs.appendFileSync(result, "");
    }
    return result;
}
exports.createIfNotExists = createIfNotExists;

//# sourceMappingURL=data:application/json;base64,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O1FBQzVDLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUF6RUQsOENBeUVDIiwiZmlsZSI6InV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChDKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSWZOb3RFeGlzdHMoZmlsZW5hbWU6IHN0cmluZywgZGlyPzogc3RyaW5nLCBub1Byb2JlPzogYm9vbGVhbikge1xyXG4gICAgbGV0IHJlc3VsdDogc3RyaW5nO1xyXG5cclxuICAgIC8vIFByb2JlIGlmIG5vdCBvdGhlcndpc2Ugc3BlY2lmaWVkXHJcbiAgICBpZiAoIW5vUHJvYmUpIHtcclxuICAgICAgICAvLyBTdGFydCBmcm9tIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGlmIG5vdCBvdGhlcndpc2Ugc3BlY2lmaWVkXHJcbiAgICAgICAgZGlyID0gZGlyIHx8IHByb2Nlc3MuY3dkKCk7XHJcblxyXG4gICAgICAgIC8vIFNlYXJjaCBmcm9tIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5IHVwIHRvIHRoZSByb290XHJcbiAgICAgICAgd2hpbGUgKGRpcikge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBwYXRoLmpvaW4oZGlyLCBmaWxlbmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGb3VuZCBhbiBleGlzdGluZyBmaWxlXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTm8gZmlsZSBmb3VuZCBpbiB0aGlzIGRpcmVjdG9yeVxyXG4gICAgICAgICAgICByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgcGFyZW50IGRpcmVjdG9yeVxyXG4gICAgICAgICAgICBsZXQgcGFyZW50RGlyID0gcGF0aC5yZXNvbHZlKGRpciwgXCIuLlwiKTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudERpciA9PT0gZGlyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZWFjaGVkIHRoZSByb290IGRpcmVjdG9yeTsgcHJvYmUgd2FzIHVuc3VjY2Vzc2Z1bFxyXG4gICAgICAgICAgICAgICAgZGlyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXIgPSBwYXJlbnREaXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEVuc3VyZSB0aGVyZSBpcyBhIGRpcmVjdG9yeVxyXG4gICAgbGV0IGxvY2F0aW9uID0gXCJkZWZhdWx0IGxvY2F0aW9uXCI7XHJcblxyXG4gICAgaWYgKCFkaXIpIHtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuSE9NRSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRpciA9IHByb2Nlc3MuZW52LkhPTUU7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uID0gXCJIT01FIGVudmlyb25tZW50IHZhcmlhYmxlXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5IT01FRFJJVkUgJiYgcHJvY2Vzcy5lbnYuSE9NRVBBVEgpIHtcclxuICAgICAgICAgICAgZGlyID0gcHJvY2Vzcy5lbnYuSE9NRURSSVZFICsgcHJvY2Vzcy5lbnYuSE9NRVBBVEg7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uID0gXCJIT01FRFJJVkUgYW5kIEhPTUVQQVRIIGVudmlyb25tZW50IHZhcmlhYmxlc1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWRpcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGRlZmF1bHQgc3RvcmFnZSBkaXJlY3RvcnkuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkVuc3VyZSB0aGUgZm9sbG93aW5nIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0IGFuZCBwb2ludCB0byBhIHdyaXRhYmxlIGxvY2F0aW9uLlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFZhcmlhYmxlczogSE9NRSBhbmQvb3IgSE9NRURSSVZFIGFuZCBIT01FUEFUSC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBkZWZhdWx0IHN0b3JhZ2UgZGlyZWN0b3J5ICdcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBkaXIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCInIGZyb20gdGhlIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFwiLiBQbGVhc2UgZW5zdXJlIHRoaXMgZGlyZWN0b3J5IGV4aXN0cyBhbmQgaXMgd3JpdGFibGUuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVuc3VyZSB0aGVyZSBpcyBhIHJlc3VsdFxyXG4gICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICByZXN1bHQgPSBwYXRoLmpvaW4oZGlyLCBmaWxlbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRW5zdXJlIHRoZSBmaWxlIGV4aXN0c1xyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHJlc3VsdCkpIHtcclxuICAgICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgZmlsZSwgb3IsIGlmIGFub3RoZXIgcHJvY2Vzc1xyXG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGNyZWF0ZSB0aGUgZmlsZSBkdXJpbmcgdGhpcyBzaG9ydFxyXG4gICAgICAgIC8vIHRpbWUgcGVyaW9kLCBlZmZlY3RpdmVseSBwZXJmb3JtIGEgbm8tb3AuXHJcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVzdWx0LCBcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
