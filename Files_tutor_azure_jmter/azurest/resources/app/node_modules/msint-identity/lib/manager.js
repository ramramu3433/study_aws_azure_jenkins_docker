/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var Q = require("q");
var AccountManager = (function () {
    function AccountManager(providers, store) {
        var _this = this;
        /* tslint:disable no-require-imports */
        this.store = store || new (require("./store/inMemory").default)();
        /* tslint:enable */
        this.providers = providers;
        this.providers.forEach(function (provider) { return provider.on("stale", function (account) { return _this.store.updateState(account.key, true); }); });
    }
    AccountManager.prototype.queryProviders = function (query) {
        query = query || {};
        return Q.resolve(this.providers.filter(function (provider) {
            // Filter on the provider ID if supplied
            if (query.id && provider.id !== query.id) {
                return false;
            }
            // Filter on the provider arguments if supplied
            if (query.args) {
                if (!provider.args) {
                    return false;
                }
                for (var key in query.args) {
                    if (provider.args[key] !== query.args[key]) {
                        return false;
                    }
                }
            }
            // Filter on the provider settings if supplied
            if (query.settings) {
                if (!provider.settings) {
                    return false;
                }
                for (var key in query.settings) {
                    if (!provider.settings[key]) {
                        return false;
                    }
                    // some settings are resources which have ids and endpoints, check if that is the case first
                    if (!!query.settings[key].id || !!query.settings[key].endpoint) {
                        // setting is a resource
                        if (!!query.settings[key].id && provider.settings[key].id !== query.settings[key].id) {
                            // setting had an id, and the id of the same setting on the provider didn't match
                            return false;
                        }
                        if (!!query.settings[key].endpoint && provider.settings[key].endpoint !== query.settings[key].endpoint) {
                            // setting had an endpoint, and the endpoint of the same setting on the provider didn't match
                            return false;
                        }
                    }
                    else if (provider.settings[key] !== query.settings[key]) {
                        return false;
                    }
                }
            }
            return true;
        }));
    };
    AccountManager.prototype.getProvider = function (id, args, settings) {
        return this.queryProviders({ id: id, args: args, settings: settings }).then(function (providers) {
            if (providers.length !== 1) {
                return Q.reject(new Error("Unmatched or ambiguous account provider."));
            }
            return providers[0];
        });
    };
    AccountManager.prototype.add = function (providerId, providerArgs, providerSettings) {
        var _this = this;
        return this.getProvider(providerId, providerArgs, providerSettings)
            .then(function (provider) { return provider.prompt(); })
            .then(function (newAccount) { return _this.store.addOrUpdate(newAccount); });
    };
    AccountManager.prototype.refresh = function (account) {
        var _this = this;
        return this.getProvider(account.key.providerId, account.key.providerArgs)
            .then(function (provider) { return provider.refresh(account); })
            .then(function (refreshedAccount) { return _this.store.addOrUpdate(refreshedAccount); });
    };
    AccountManager.prototype.remove = function (account) {
        var _this = this;
        return this.getProvider(account.key.providerId, account.key.providerArgs).then(function (provider) {
            return _this.store.remove(account.key).then(function (result) {
                if (!result) {
                    return false;
                }
                return provider.clear(account).then(function () { return true; });
            });
        });
    };
    return AccountManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AccountManager;

//# sourceMappingURL=data:application/json;base64,
