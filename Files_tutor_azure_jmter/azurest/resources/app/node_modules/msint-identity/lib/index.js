/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
/**
 * Creates a new in-memory account store for use with the default account manager.
 */
function createInMemoryAccountStore() {
    /* tslint:disable no-require-imports */
    return new (require("./store/inMemory").default)();
    /* tslint:enable */
}
exports.createInMemoryAccountStore = createInMemoryAccountStore;
/**
 * Creates a new JSON-file based account store for use with the default account manager.
 * @param dir - An optional directory from which the file should be located.
 *              If omitted, defaults to the current working directory.
 * @param filename - An optional name of the file to be used.
 *                   If omitted, defaults to ".accounts".
 * @param noProbe - Optionally indicates if no probing should occur for the file.
 *                  Probing (the default) starts from the specified directory and
 *                  looks through the parent chain of directories for the file,
 *                  and then looks in the user's home directory. If the file is
 *                  not found, it creates the file in the user's home directory.
 */
function createJsonFileAccountStore(dir, filename, noProbe) {
    /* tslint:disable no-require-imports */
    return new (require("./store/jsonFile").default)(dir, filename, noProbe);
    /* tslint:enable */
}
exports.createJsonFileAccountStore = createJsonFileAccountStore;
/**
 * Creates a new instance of the account manager.
 * @param providers - An array of account providers.
 * @param store - An optional account store.
 *                If omitted, defaults to an in-memory account store.
 */
function createAccountManager(providers, store) {
    /* tslint:disable no-require-imports */
    return new (require("./manager").default)(providers, store);
    /* tslint:enable */
}
exports.createAccountManager = createAccountManager;

//# sourceMappingURL=data:application/json;base64,
