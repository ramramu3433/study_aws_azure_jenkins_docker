/// <reference types="node" />
/// <reference types="q" />
/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
import { Promise } from "q";
import * as manager from "./manager";
/**
 * Represents a query for accounts.
 */
export interface AccountQuery {
    /**
     * An optional identifier of a provider.
     */
    providerId?: string;
    /**
     * Optional arguments that identify an instantiation of a provider.
     */
    providerArgs?: any;
    /**
     * An optional provider-defined identifier of an account.
     */
    accountId?: string;
}
/**
 * Represents a key that identifies an account.
 */
export interface AccountKey {
    /**
     * The identifier of the provider.
     */
    providerId: string;
    /**
     * Any arguments that identify an instantiation of the provider.
     */
    providerArgs?: any;
    /**
     * The provider-scoped identifier of the account.
     */
    accountId: string;
}
/**
 * Represents display information for an account.
 */
export interface AccountDisplayInfo {
    /**
     * An optional base-64 encoded logo that offers context for the account.
     */
    contextualLogo?: string;
    /**
     * A display name that offers context for the account, such as "Contoso".
     */
    contextualDisplayName: string;
    /**
     * A display name that identifies the account, such as "user@contoso.com".
     */
    displayName: string;
}
/**
 * Represents an account.
 */
export interface Account {
    /**
     * The key that identifies the account.
     */
    key: AccountKey;
    /**
     * A programmatic name for the account.
     */
    name: string;
    /**
     * Display information for the account.
     */
    displayInfo: AccountDisplayInfo;
    /**
     * Custom properties stored with the account.
     */
    properties: any;
    /**
     * Indicates if the account needs refreshing.
     */
    stale: boolean;
}
/**
 * Represents the before and after state of an account that was modified.
 */
export interface AccountModification {
    /**
     * The account before modification.
     */
    before: Account;
    /**
     * The account after modification.
     */
    after: Account;
}
/**
 * Represents changes to an account store.
 */
export interface AccountStoreChanges {
    /**
     * An array of accounts that were added.
     */
    added: Account[];
    /**
     * An array of information about accounts that were modified.
     */
    modified: AccountModification[];
    /**
     * An array of accounts that were removed.
     */
    removed: Account[];
}
/**
 * Represents a listener on changes to an account store.
 */
export interface AccountStoreChangeListener {
    /**
     * Handles changes to an account store.
     * @param changes - A set of changes to the account store.
     */
    (changes: AccountStoreChanges): void;
}
/**
 * Represents a store for accounts.
 */
export interface AccountStore extends NodeJS.EventEmitter {
    /**
     * Queries for accounts in the store.
     * Returns an empty array if no matches are found.
     * @param query - An optional account query.
     *                If omitted, all accounts are returned.
     */
    query(query?: AccountQuery): Promise<Account[]>;
    /**
     * Updates the display information stored for an account.
     * Returns null if no account was found to update.
     * Otherwise, returns a new updated account instance.
     * @param key - The key of an account.
     * @param displayInfo - The updated display information for the account.
     */
    updateDisplayInfo(key: AccountKey, displayInfo: AccountDisplayInfo): Promise<Account>;
    /**
     * Updates the custom properties stored with an account.
     * Returns null if no account was found to update.
     * Otherwise, returns a new updated account instance.
     * @param key - The key of an account.
     * @param properties - The updated properties for the account.
     *                     Setting a property to undefined removes the property.
     */
    updateProperties(key: AccountKey, properties: any): Promise<Account>;
    addListener(event: "change", listener: AccountStoreChangeListener): this;
    addListener(event: string, listener: Function): this;
    on(event: "change", listener: AccountStoreChangeListener): this;
    on(event: string, listener: Function): this;
    once(event: "change", listener: AccountStoreChangeListener): this;
    once(event: string, listener: Function): this;
    removeListener(event: "change", listener: AccountStoreChangeListener): this;
    removeListener(event: string, listener: Function): this;
    listeners(event: "change"): AccountStoreChangeListener[];
    listeners(event: string): Function[];
    emit(event: "change", changes: AccountStoreChanges): boolean;
    emit(event: string, ...args: any[]): boolean;
}
/**
 * Creates a new in-memory account store for use with the default account manager.
 */
export declare function createInMemoryAccountStore(): manager.AccountStore;
/**
 * Creates a new JSON-file based account store for use with the default account manager.
 * @param dir - An optional directory from which the file should be located.
 *              If omitted, defaults to the current working directory.
 * @param filename - An optional name of the file to be used.
 *                   If omitted, defaults to ".accounts".
 * @param noProbe - Optionally indicates if no probing should occur for the file.
 *                  Probing (the default) starts from the specified directory and
 *                  looks through the parent chain of directories for the file,
 *                  and then looks in the user's home directory. If the file is
 *                  not found, it creates the file in the user's home directory.
 */
export declare function createJsonFileAccountStore(dir?: string, filename?: string, noProbe?: boolean): manager.AccountStore;
/**
 * Represents a query for account providers.
 */
export interface AccountProviderQuery {
    /**
     * An optional identifier of a provider.
     */
    id?: string;
    /**
     * Optional arguments that identify an instantiation of a provider.
     */
    args?: any;
    /**
     * Optional setttings that identify an instantiation of a provider.
     */
    settings?: {};
}
/**
 * Represents a provider of accounts.
 */
export interface AccountProvider {
    /**
     * The identifier of the provider.
     */
    id: string;
    /**
     * Any arguments that identify an instantiation of the provider.
     */
    args?: any;
    /**
     * Optional setttings that identify an instantiation of a provider.
     */
    settings?: {};
}
/**
 * Represents a manager of stored accounts supplied by one or more providers.
 */
export interface AccountManager {
    /**
     * The account store.
     */
    store: AccountStore;
    /**
     * Queries for account providers.
     * Returns an empty array if no matches are found.
     * @param query - An optional provider query.
     *                If omitted, all providers are returned.
     */
    queryProviders(query?: AccountProviderQuery): Promise<AccountProvider[]>;
    /**
     * Gets an account provider.
     * Returns an error if no provider is found or the input is ambiguous.
     * @param id - The identifier of a provider.
     * @param args - Optional arguments that identify an instantiation of a provider.
     * @param settings - Optional settings that identify an instantiation of a provider.
     */
    getProvider<T extends AccountProvider>(id: string, args?: {}, settings?: {}): Promise<T>;
    /**
     * Adds an account to the store.
     * Returns an error if no provider is found or the input is ambiguous.
     * Returns an error if adding of the account was canceled.
     * @param id - An optional identifier of a provider.
     *             If only one provider is registered, this may be omitted.
     * @param providerArgs - Optional arguments that identify an instantiation of a provider.
     *               If only one provider is registered, this may be omitted.
     * @param providerSettings - Optional settings that identify an instantiation of a provider.
     *               If only one provider is registered, this may be omitted.
     */
    add(providerId?: string, providerArgs?: {}, providerSettings?: {}): Promise<Account>;
    /**
     * Refreshes a stale account.
     * Returns an error if the account's provider is not found.
     * Returns an error if refreshing of the account was canceled.
     * Otherwise, returns a new updated account instance.
     * @param account - An account.
     */
    refresh(account: Account): Promise<Account>;
    /**
     * Removes an account, clearing any sensitive information.
     * Returns an error if the account's provider is not found.
     * Returns false if the account was not found.
     * Otherwise, returns true.
     * @param account - An account.
     */
    remove(account: Account): Promise<boolean>;
}
/**
 * Creates a new instance of the account manager.
 * @param providers - An array of account providers.
 * @param store - An optional account store.
 *                If omitted, defaults to an in-memory account store.
 */
export declare function createAccountManager(providers: manager.AccountProvider[], store?: manager.AccountStore): AccountManager;
