/// <reference types="q" />
/// <reference types="node" />
/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
import { Promise } from "q";
import * as index from "./index";
/**
 * Represents a store for accounts for use with the default account manager.
 */
export interface AccountStore extends index.AccountStore {
    /**
     * Adds or updates an account produced by an account provider.
     * Returns a new updated account instance.
     * @param account - An account.
     */
    addOrUpdate(account: index.Account): Promise<index.Account>;
    /**
     * Updates the state of an account when an account provider indicated it became stale.
     * Returns null if no account was found to update.
     * Otherwise, returns a new updated account instance.
     * @param key - The key of an account.
     * @param stale - The updated value of the stale property for the account.
     */
    updateState(key: index.AccountKey, stale: boolean): Promise<index.Account>;
    /**
     * Removes an account.
     * Returns false if the account was not found.
     * Otherwise, returns true.
     * @param key - The key of an account.
     */
    remove(key: index.AccountKey): Promise<boolean>;
}
/**
 * Represents a listener that is called when an account becomes stale.
 */
export interface AccountStaleListener {
    /**
     * Handles the event of an account becoming stale.
     * @param account - An account.
     */
    (account: index.Account): void;
}
/**
 * Represents a provider of accounts for use with the default account manager.
 */
export interface AccountProvider extends index.AccountProvider, NodeJS.EventEmitter {
    /**
     * Prompts the user to enter account information.
     * Returns an error if the user canceled the operation.
     */
    prompt(): Promise<index.Account>;
    /**
     * Refreshes a stale account.
     * Returns an error if the user canceled the operation.
     * Otherwise, returns a new updated account instance.
     * @param account - An account.
     */
    refresh(account: index.Account): Promise<index.Account>;
    /**
     * Clears sensitive information for an account.
     * @param account - An account.
     */
    clear(account: index.Account): Promise<void>;
    addListener(event: "stale", listener: AccountStaleListener): this;
    addListener(event: string, listener: Function): this;
    on(event: "stale", listener: AccountStaleListener): this;
    on(event: string, listener: Function): this;
    once(event: "stale", listener: AccountStaleListener): this;
    once(event: string, listener: Function): this;
    removeListener(event: "stale", listener: AccountStaleListener): this;
    removeListener(event: string, listener: Function): this;
    listeners(event: "stale"): AccountStaleListener[];
    listeners(event: string): Function[];
    emit(event: "stale", account: index.Account): boolean;
    emit(event: string, ...args: any[]): boolean;
}
export default class AccountManager implements index.AccountManager {
    store: AccountStore;
    private providers;
    constructor(providers: AccountProvider[], store?: AccountStore);
    queryProviders(query?: index.AccountProviderQuery): Promise<AccountProvider[]>;
    getProvider<T extends index.AccountProvider>(id: string, args?: {}, settings?: {}): Promise<T>;
    add(providerId?: string, providerArgs?: {}, providerSettings?: {}): Promise<index.Account>;
    refresh(account: index.Account): Promise<index.Account>;
    remove(account: index.Account): Promise<boolean>;
}
