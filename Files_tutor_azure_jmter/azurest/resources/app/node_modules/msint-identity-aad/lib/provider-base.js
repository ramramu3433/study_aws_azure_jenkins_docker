/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var adal = require("adal-node");
var events_1 = require("events");
var q_1 = require("q");
var Q = require("q");
var request = require("request");
var index = require("./index");
// TODO: load the logos in a more appropriate manner
/* tslint:disable no-require-imports */
var logos = require("../res/logos.json");
/* tslint:enable */
var ProviderBase = (function (_super) {
    __extends(ProviderBase, _super);
    function ProviderBase(settings, tokenCache) {
        var _this = _super.call(this) || this;
        _this.id = index.id;
        _this.args = {
            host: settings.host,
            clientId: settings.clientId
        };
        _this.settings = settings;
        /* tslint:disable no-require-imports */
        _this.tokenCache = tokenCache || new (require("./token-cache/inMemory").default)();
        return _this;
        /* tslint:enable */
    }
    ProviderBase.prototype.getTenantIds = function (userId) {
        var _this = this;
        return q_1.Promise(function (resolve, reject) {
            // Get an access token to the ARM resource
            var authorityUrl = _this.settings.host + "/common", context = new adal.AuthenticationContext(authorityUrl, null, _this.tokenCache);
            context.acquireToken(_this.settings.armResource.id, userId, _this.settings.clientId, function (error, response) {
                if (error) {
                    reject(error);
                    return;
                }
                if (!!_this.settings.adTenants && _this.settings.adTenants.length > 0) {
                    resolve(_this.settings.adTenants);
                }
                else {
                    request.get(_this.settings.armResource.endpoint + "/tenants?api-version=2015-01-01", {
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + response.accessToken
                        },
                        json: true
                    }, function (armError, armResponse, body) {
                        if (armError || body.error) {
                            reject(armError || body.error);
                        }
                        else {
                            resolve(body.value.map(function (item) { return item.tenantId; }));
                        }
                    });
                }
            });
        });
    };
    ProviderBase.prototype.getTenantDisplayName = function (tenantId, userId) {
        var _this = this;
        return q_1.Promise(function (resolve, reject) {
            // Get an access token to the AAD Graph resource
            var authorityUrl = _this.settings.host + "/" + tenantId, context = new adal.AuthenticationContext(authorityUrl, null, _this.tokenCache);
            context.acquireToken(_this.settings.graphResource.id, userId, _this.settings.clientId, function (error, response) {
                if (error) {
                    reject(error);
                    return;
                }
                request.get(_this.settings.graphResource.endpoint + "/" + tenantId + "/tenantDetails?api-version=2013-04-05", {
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + response.accessToken
                    },
                    json: true
                }, function (graphError, graphResponse, body) {
                    if (graphError || body["odata.error"]) {
                        reject(graphError || body["odata.error"]);
                    }
                    else if (body.value.length && body.value[0].displayName) {
                        resolve(body.value[0].displayName);
                    }
                    else {
                        // TODO: localization
                        resolve("Work or school account");
                    }
                });
            });
        });
    };
    ProviderBase.prototype.getTenants = function (msa, userId, tenantIds) {
        var _this = this;
        var tenants = [], authenticateAgainstTenant = function (index) {
            if (index < tenantIds.length) {
                // Authenticate the next tenant
                return _this.authenticate(tenantIds[index], msa, userId, true).then(function (response) {
                    var getTenantName = msa ?
                        // TODO: localization
                        Q.resolve("Microsoft account") :
                        _this.getTenantDisplayName(response.tenantId, response.userId);
                    return getTenantName.then(function (displayName) {
                        tenants.push({
                            id: response.tenantId,
                            displayName: displayName,
                            userId: response.userId
                        });
                        return authenticateAgainstTenant(index + 1);
                    });
                });
            }
            else {
                // All tenants authenticated; return result
                return Q.resolve(tenants);
            }
        };
        return authenticateAgainstTenant(0);
    };
    ProviderBase.prototype.signIn = function (msa, userId) {
        var _this = this;
        // Initial authentication is via the common/discovery tenant
        return this.authenticate("common", msa, userId, false).then(function (response) {
            var identityProvider = response.identityProvider;
            if (identityProvider) {
                identityProvider = identityProvider.toLowerCase();
            }
            // Determine if this is a Microsoft account
            msa = identityProvider && (identityProvider.indexOf("live.com") !== -1 ||
                identityProvider.indexOf("live-int.com") !== -1 ||
                identityProvider.indexOf("f8cdef31-a31e-4b4a-93e4-5f571e91255a") !== -1 ||
                identityProvider.indexOf("ea8a4392-515e-481f-879e-6571ff2a8a36") !== -1);
            // Get the user information
            userId = response.userId;
            var displayName = (response.givenName && response.familyName) ?
                (response.givenName + " " + response.familyName) : userId;
            // Get all the additional tenants
            return _this.getTenantIds(userId).then(function (tenantIds) {
                // Ensure the home tenant ID is the first in the list
                var homeTenantIndex = tenantIds.indexOf(response.tenantId);
                if (homeTenantIndex >= 0) {
                    tenantIds.splice(homeTenantIndex, 1);
                }
                tenantIds.unshift(response.tenantId);
                // Now authenticate with each tenant and get tenant information
                return _this.getTenants(msa, userId, tenantIds);
            }).then(function (tenants) {
                return {
                    key: {
                        providerId: _this.id,
                        providerArgs: _this.args,
                        accountId: userId
                    },
                    name: userId,
                    displayInfo: {
                        // TODO: don't provide the logo this way
                        contextualLogo: msa ? logos.msa : logos.org,
                        contextualDisplayName: tenants[0].displayName,
                        displayName: displayName
                    },
                    properties: {
                        isMsAccount: msa,
                        tenants: tenants
                    },
                    stale: false
                };
            });
        });
    };
    ProviderBase.prototype.getSettings = function () {
        return Q.resolve(this.settings);
    };
    ProviderBase.prototype.prompt = function () {
        return this.signIn();
    };
    ProviderBase.prototype.refresh = function (account) {
        return this.signIn(account.properties.isMsAccount, account.name);
    };
    ProviderBase.prototype.clear = function (account) {
        var _this = this;
        return q_1.Promise(function (resolve, reject) { return _this.tokenCache.find({
            _authority: null,
            _clientId: _this.settings.clientId,
            userId: account.name
        }, function (error, entries) {
            if (error) {
                reject(error);
            }
            // Filter the entries to this provider's host, but still all tenants
            entries = entries.filter(function (entry) { return entry._authority.indexOf(_this.settings.host + "/") !== 0; });
            // Remove all the entries
            _this.tokenCache.remove(entries, function (removeError) {
                if (removeError) {
                    reject(removeError);
                    return;
                }
                // The account is clearly stale now
                _this.emit("stale", account);
                resolve(null);
            });
        }); });
    };
    ProviderBase.prototype.isMicrosoftAccount = function (account) {
        return Q.resolve(account.properties.isMsAccount);
    };
    ProviderBase.prototype.getHomeTenant = function (account) {
        return Q.resolve(account.properties.tenants[0]);
    };
    ProviderBase.prototype.getAllTenants = function (account) {
        return Q.resolve(account.properties.tenants);
    };
    ProviderBase.prototype.tryAcquireToken = function (account, tenantId, resourceId) {
        var _this = this;
        var authorityUrl = this.settings.host + "/" + tenantId, context = new adal.AuthenticationContext(authorityUrl, null, this.tokenCache), tenants = account.properties.tenants, userId;
        for (var i = 0; i < tenants.length; i++) {
            if (tenants[i].id === tenantId) {
                userId = tenants[i].userId;
                break;
            }
        }
        if (!userId) {
            return Q.reject(new Error("Unknown tenant."));
        }
        return q_1.Promise(function (resolve, reject) {
            context.acquireToken(resourceId, userId, _this.settings.clientId, function (error, response) {
                if (error) {
                    // TODO: for now, assume the reason for failure is always because
                    // tokens are expired or missing, so raise that the account is stale.
                    _this.emit("stale", account);
                    reject(error);
                }
                else {
                    resolve(response.accessToken);
                }
            });
        });
    };
    ProviderBase.prototype.listeners = function (event) {
        return _super.prototype.listeners.call(this, event);
    };
    return ProviderBase;
}(events_1.EventEmitter));
exports.default = ProviderBase;

//# sourceMappingURL=data:application/json;base64,
