/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
/**
 * The identifier of the Azure Active Directory account provider.
 */
exports.id = "Microsoft.AzureActiveDirectory";
/**
 * Gets a string representation of a key for an account created by an Azure Active Directory account provider.
 * @param key - The key of an account.
 */
function accountKeyToString(key) {
    return JSON.stringify([
        key.providerId,
        key.providerArgs.host,
        key.providerArgs.clientId,
        key.accountId
    ]);
}
exports.accountKeyToString = accountKeyToString;
/**
 * Gets the key for an account created by an Azure Active Directory account provider from a previously produced string.
 * @param s - A string previously produced from an account key.
 */
function stringToAccountKey(s) {
    var array = JSON.parse(s);
    if (!Array.isArray(array)) {
        return null;
    }
    return {
        providerId: array[0],
        providerArgs: {
            host: array[1],
            clientId: array[2]
        },
        accountId: array[3]
    };
}
exports.stringToAccountKey = stringToAccountKey;
/**
 * The default (public) cloud settings.
 */
exports.defaultSettings = {
    host: "https://login.microsoftonline.com",
    clientId: "872cd9fa-d31f-45e0-9eab-6e460a02d1f1",
    signInResourceId: "https://management.core.windows.net/",
    graphResource: {
        id: "https://graph.windows.net/",
        endpoint: "https://graph.windows.net"
    },
    armResource: {
        id: "https://management.core.windows.net/",
        endpoint: "https://management.azure.com"
    }
};
/**
 * The China cloud settings.
 */
exports.chinaSettings = {
    host: "https://login.chinacloudapi.cn",
    clientId: "872cd9fa-d31f-45e0-9eab-6e460a02d1f1",
    signInResourceId: "https://management.core.chinacloudapi.cn/",
    graphResource: {
        id: "https://graph.chinacloudapi.cn/",
        endpoint: "https://graph.chinacloudapi.cn"
    },
    armResource: {
        id: "https://management.core.chinacloudapi.cn/",
        endpoint: "https://management.chinacloudapi.cn"
    }
};
/**
 * Creates an in-memory ADAL token cache.
 */
function createInMemoryTokenCache() {
    /* tslint:disable no-require-imports */
    return new (require("./token-cache/inMemory").default)();
    /* tslint:enable */
}
exports.createInMemoryTokenCache = createInMemoryTokenCache;
/**
 * Creates a JSON-file based ADAL token cache.
 * @param dir - An optional directory from which the file should be located.
 *              If omitted, defaults to the current working directory.
 * @param filename - An optional name of the file to be used.
 *                   If omitted, defaults to ".adalcache".
 * @param noProbe - Optionally indicates if no probing should occur for the file.
 *                  Probing (the default) starts from the specified directory and
 *                  looks through the parent chain of directories for the file,
 *                  and then looks in the user's home directory. If the file is
 *                  not found, it creates the file in the user's home directory.
 */
function createJsonFileTokenCache(dir, filename, noProbe) {
    /* tslint:disable no-require-imports */
    return new (require("./token-cache/jsonFile").default)(dir, filename, noProbe);
    /* tslint:enable */
}
exports.createJsonFileTokenCache = createJsonFileTokenCache;
/**
 * Creates a JSON-file based ADAL token cache that stores tokens in a native keychain.
 * @param filename - An optional name of the file to be used.
 *                   If omitted, defaults to ".adalcache".
 */
function createJsonFileWithNativeTokenCache(filename) {
    /* tslint:disable no-require-imports */
    return new (require("./token-cache/jsonFileWithNative").default)(filename);
    /* tslint:enable */
}
exports.createJsonFileWithNativeTokenCache = createJsonFileWithNativeTokenCache;
/**
 * The default (public) cloud authorization code grant flow settings.
 */
exports.defaultAuthorizationCodeGrantFlowSettings = _.extend({}, exports.defaultSettings, {
    redirectUri: "urn:ietf:wg:oauth:2.0:oob"
});
/**
 * The China cloud authorization code grant flow settings.
 */
exports.chinaAuthorizationCodeGrantFlowSettings = _.extend({}, exports.chinaSettings, {
    redirectUri: "urn:ietf:wg:oauth:2.0:oob"
});
/**
 * Creates a new instance of the Azure Active Directory account provider that uses the authorization code grant flow.
 * @param getAuthorizationCode - A function that provides the interactive aspect of the flow.
 * @param settings - Optional settings for the flow.
 * @param tokenCache - An optional token cache to use.
 *                     If omitted, defaults to an in-memory token cache.
 */
function createAuthorizationCodeGrantFlowProvider(getAuthorizationCode, settings, tokenCache) {
    /* tslint:disable no-require-imports */
    return new (require("./flow/authorizationCodeGrant").default)(getAuthorizationCode, settings, tokenCache);
    /* tslint:enable */
}
exports.createAuthorizationCodeGrantFlowProvider = createAuthorizationCodeGrantFlowProvider;

//# sourceMappingURL=data:application/json;base64,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LENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSx1QkFBZSxFQUFFO0lBQ2pGLFdBQVcsRUFBRSwyQkFBMkI7Q0FDM0MsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDUSxRQUFBLHVDQUF1QyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHFCQUFhLEVBQUU7SUFDN0UsV0FBVyxFQUFFLDJCQUEyQjtDQUMzQyxDQUFDLENBQUM7QUFFSDs7Ozs7O0dBTUc7QUFDSCxrREFDSSxvQkFBK0MsRUFDL0MsUUFBNkMsRUFDN0MsVUFBNEI7SUFDNUIsdUNBQXVDO0lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzFHLG1CQUFtQjtBQUN2QixDQUFDO0FBUEQsNEZBT0MiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29weXJpZ2h0IChDKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIF8gZnJvbSBcInVuZGVyc2NvcmVcIjtcclxuaW1wb3J0ICogYXMgYWRhbCBmcm9tIFwiYWRhbC1ub2RlXCI7XHJcbmltcG9ydCB7IFByb21pc2UgfSBmcm9tIFwicVwiO1xyXG5cclxuaW1wb3J0ICogYXMgaWRlbnRpdHkgZnJvbSBcIm1zaW50LWlkZW50aXR5XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBwcm92aWRlcl9iYXNlIGZyb20gXCIuL3Byb3ZpZGVyLWJhc2VcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBhY2NvdW50IHByb3ZpZGVyLlxyXG4gKi9cclxuZXhwb3J0IGxldCBpZCA9IFwiTWljcm9zb2Z0LkF6dXJlQWN0aXZlRGlyZWN0b3J5XCI7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHRlbmFudCAoYW4gQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBpbnN0YW5jZSkgdG8gd2hpY2ggYSB1c2VyIGhhcyBhY2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRlbmFudCB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgdGVuYW50LlxyXG4gICAgICovXHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGlzcGxheSBuYW1lIG9mIHRoZSB0ZW5hbnQuXHJcbiAgICAgKi9cclxuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSB1c2VyIGluIHRoZSB0ZW5hbnQuXHJcbiAgICAgKi9cclxuICAgIHVzZXJJZDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHJlc291cmNlIGV4cG9zZWQgYnkgYW4gQXp1cmUgQWN0aXZlIERpcmVjdG9yeS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgcmVzb3VyY2UuXHJcbiAgICAgKi9cclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBlbmRwb2ludCB1c2VkIHRvIGFjY2VzcyB0aGUgcmVzb3VyY2UuXHJcbiAgICAgKi9cclxuICAgIGVuZHBvaW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIHRoZSBhcmd1bWVudHMgdGhhdCBpZGVudGlmeSBhbiBpbnN0YW50aWF0aW9uIG9mIHRoZSBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IGFjY291bnQgcHJvdmlkZXIuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFyZ3VtZW50cyB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBob3N0IG9mIHRoZSBhdXRob3JpdHkuXHJcbiAgICAgKi9cclxuICAgIGhvc3Q6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIGNsaWVudCBhcHBsaWNhdGlvbi5cclxuICAgICAqL1xyXG4gICAgY2xpZW50SWQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgc2V0dGluZ3MgZm9yIGFuIEF6dXJlIEFjdGl2ZSBEaXJlY3RvcnkgYWNjb3VudCBwcm92aWRlci5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaG9zdCBvZiB0aGUgYXV0aG9yaXR5LlxyXG4gICAgICovXHJcbiAgICBob3N0Pzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgY2xpZW50IGFwcGxpY2F0aW9uLlxyXG4gICAgICovXHJcbiAgICBjbGllbnRJZD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHJlc291cmNlIHRvIHJlcXVlc3Qgd2hlbiBzaWduaW5nIGluLlxyXG4gICAgICovXHJcbiAgICBzaWduSW5SZXNvdXJjZUlkPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbmZvcm1hdGlvbiB0aGF0IGRlc2NyaWJlcyB0aGUgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBHcmFwaCByZXNvdXJjZS5cclxuICAgICAqL1xyXG4gICAgZ3JhcGhSZXNvdXJjZT86IFJlc291cmNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbmZvcm1hdGlvbiB0aGF0IGRlc2NyaWJlcyB0aGUgQXp1cmUgUmVzb3VyY2UgTWFuYWdlbWVudCByZXNvdXJjZS5cclxuICAgICAqL1xyXG4gICAgYXJtUmVzb3VyY2U/OiBSZXNvdXJjZTtcclxuICAgIC8qKlxyXG4gICAgICogQSBsaXN0IG9mIHRlbmFudCBpZHMgdG8gYXV0aGVudGljYXRlIGFnYWluc3QuIElmIGRlZmluZWQsIHRoZW4gdGhlc2UgaWRzXHJcbiAgICAgKiB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiBxdWVyeWluZyB0aGUgdGVuYW50cyBlbmRwb2ludCBvZiB0aGUgYXJtUmVzb3VyY2UuXHJcbiAgICAgKi9cclxuICAgIGFkVGVuYW50cz86IHN0cmluZ1tdO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBhY2NvdW50IHByb3ZpZGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY2NvdW50UHJvdmlkZXIgZXh0ZW5kcyBpZGVudGl0eS5BY2NvdW50UHJvdmlkZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcmd1bWVudHMgdGhhdCBpZGVudGlmeSBhbiBpbnN0YW50aWF0aW9uIG9mIHRoZSBwcm92aWRlci5cclxuICAgICAqL1xyXG4gICAgYXJnczogQXJndW1lbnRzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBwcm92aWRlciBzZXR0aW5ncy5cclxuICAgICAqL1xyXG4gICAgZ2V0U2V0dGluZ3MoKTogUHJvbWlzZTxTZXR0aW5ncz47XHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyBpZiBhbiBhY2NvdW50IHJlcHJlc2VudHMgYSBNaWNyb3NvZnQgYWNjb3VudC5cclxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gQW4gYWNjb3VudC5cclxuICAgICAqL1xyXG4gICAgaXNNaWNyb3NvZnRBY2NvdW50KGFjY291bnQ6IGlkZW50aXR5LkFjY291bnQpOiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBob21lIHRlbmFudCBmb3IgYW4gYWNjb3VudC5cclxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gQW4gYWNjb3VudC5cclxuICAgICAqL1xyXG4gICAgZ2V0SG9tZVRlbmFudChhY2NvdW50OiBpZGVudGl0eS5BY2NvdW50KTogUHJvbWlzZTxUZW5hbnQ+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGFuIGFycmF5IG9mIGFsbCB0aGUgdGVuYW50cyBmb3IgYW4gYWNjb3VudC5cclxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gQW4gYWNjb3VudC5cclxuICAgICAqL1xyXG4gICAgZ2V0QWxsVGVuYW50cyhhY2NvdW50OiBpZGVudGl0eS5BY2NvdW50KTogUHJvbWlzZTxUZW5hbnRbXT47XHJcbiAgICAvKipcclxuICAgICAqIFRyaWVzIHRvIGFjcXVpcmUgYSB0b2tlbiBmb3IgYW4gYWNjb3VudCB0byBhIHJlc291cmNlIGluIGEgdGVuYW50LlxyXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBBbiBhY2NvdW50LlxyXG4gICAgICogQHBhcmFtIHRlbmFudElkIC0gVGhlIGlkZW50aWZpZXIgb2YgYSB0ZW5hbnQuXHJcbiAgICAgKiBAcGFyYW0gcmVzb3VyY2VJZCAtIFRoZSBpZGVudGlmaWVyIG9mIGEgcmVzb3VyY2UuXHJcbiAgICAgKi9cclxuICAgIHRyeUFjcXVpcmVUb2tlbihhY2NvdW50OiBpZGVudGl0eS5BY2NvdW50LCB0ZW5hbnRJZDogc3RyaW5nLCByZXNvdXJjZUlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEga2V5IGZvciBhbiBhY2NvdW50IGNyZWF0ZWQgYnkgYW4gQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBhY2NvdW50IHByb3ZpZGVyLlxyXG4gKiBAcGFyYW0ga2V5IC0gVGhlIGtleSBvZiBhbiBhY2NvdW50LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFjY291bnRLZXlUb1N0cmluZyhrZXk6IGlkZW50aXR5LkFjY291bnRLZXkpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShbXHJcbiAgICAgICAga2V5LnByb3ZpZGVySWQsXHJcbiAgICAgICAga2V5LnByb3ZpZGVyQXJncy5ob3N0LFxyXG4gICAgICAgIGtleS5wcm92aWRlckFyZ3MuY2xpZW50SWQsXHJcbiAgICAgICAga2V5LmFjY291bnRJZFxyXG4gICAgXSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBrZXkgZm9yIGFuIGFjY291bnQgY3JlYXRlZCBieSBhbiBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IGFjY291bnQgcHJvdmlkZXIgZnJvbSBhIHByZXZpb3VzbHkgcHJvZHVjZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0gcyAtIEEgc3RyaW5nIHByZXZpb3VzbHkgcHJvZHVjZWQgZnJvbSBhbiBhY2NvdW50IGtleS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb0FjY291bnRLZXkoczogc3RyaW5nKSB7XHJcbiAgICBsZXQgYXJyYXk6IHN0cmluZ1tdID0gSlNPTi5wYXJzZShzKTtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiA8aWRlbnRpdHkuQWNjb3VudEtleT57XHJcbiAgICAgICAgcHJvdmlkZXJJZDogYXJyYXlbMF0sXHJcbiAgICAgICAgcHJvdmlkZXJBcmdzOiB7XHJcbiAgICAgICAgICAgIGhvc3Q6IGFycmF5WzFdLFxyXG4gICAgICAgICAgICBjbGllbnRJZDogYXJyYXlbMl1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjY291bnRJZDogYXJyYXlbM11cclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCAocHVibGljKSBjbG91ZCBzZXR0aW5ncy5cclxuICovXHJcbmV4cG9ydCBsZXQgZGVmYXVsdFNldHRpbmdzID0gPFNldHRpbmdzPntcclxuICAgIGhvc3Q6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tXCIsXHJcbiAgICBjbGllbnRJZDogXCI4NzJjZDlmYS1kMzFmLTQ1ZTAtOWVhYi02ZTQ2MGEwMmQxZjFcIixcclxuICAgIHNpZ25JblJlc291cmNlSWQ6IFwiaHR0cHM6Ly9tYW5hZ2VtZW50LmNvcmUud2luZG93cy5uZXQvXCIsXHJcbiAgICBncmFwaFJlc291cmNlOiB7XHJcbiAgICAgICAgaWQ6IFwiaHR0cHM6Ly9ncmFwaC53aW5kb3dzLm5ldC9cIixcclxuICAgICAgICBlbmRwb2ludDogXCJodHRwczovL2dyYXBoLndpbmRvd3MubmV0XCJcclxuICAgIH0sXHJcbiAgICBhcm1SZXNvdXJjZToge1xyXG4gICAgICAgIGlkOiBcImh0dHBzOi8vbWFuYWdlbWVudC5jb3JlLndpbmRvd3MubmV0L1wiLFxyXG4gICAgICAgIGVuZHBvaW50OiBcImh0dHBzOi8vbWFuYWdlbWVudC5henVyZS5jb21cIlxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBDaGluYSBjbG91ZCBzZXR0aW5ncy5cclxuICovXHJcbmV4cG9ydCBsZXQgY2hpbmFTZXR0aW5ncyA9IDxTZXR0aW5ncz57XHJcbiAgICBob3N0OiBcImh0dHBzOi8vbG9naW4uY2hpbmFjbG91ZGFwaS5jblwiLFxyXG4gICAgY2xpZW50SWQ6IFwiODcyY2Q5ZmEtZDMxZi00NWUwLTllYWItNmU0NjBhMDJkMWYxXCIsXHJcbiAgICBzaWduSW5SZXNvdXJjZUlkOiBcImh0dHBzOi8vbWFuYWdlbWVudC5jb3JlLmNoaW5hY2xvdWRhcGkuY24vXCIsXHJcbiAgICBncmFwaFJlc291cmNlOiB7XHJcbiAgICAgICAgaWQ6IFwiaHR0cHM6Ly9ncmFwaC5jaGluYWNsb3VkYXBpLmNuL1wiLFxyXG4gICAgICAgIGVuZHBvaW50OiBcImh0dHBzOi8vZ3JhcGguY2hpbmFjbG91ZGFwaS5jblwiXHJcbiAgICB9LFxyXG4gICAgYXJtUmVzb3VyY2U6IHtcclxuICAgICAgICBpZDogXCJodHRwczovL21hbmFnZW1lbnQuY29yZS5jaGluYWNsb3VkYXBpLmNuL1wiLFxyXG4gICAgICAgIGVuZHBvaW50OiBcImh0dHBzOi8vbWFuYWdlbWVudC5jaGluYWNsb3VkYXBpLmNuXCJcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGluLW1lbW9yeSBBREFMIHRva2VuIGNhY2hlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluTWVtb3J5VG9rZW5DYWNoZSgpOiBhZGFsLlRva2VuQ2FjaGUge1xyXG4gICAgLyogdHNsaW50OmRpc2FibGUgbm8tcmVxdWlyZS1pbXBvcnRzICovXHJcbiAgICByZXR1cm4gbmV3IChyZXF1aXJlKFwiLi90b2tlbi1jYWNoZS9pbk1lbW9yeVwiKS5kZWZhdWx0KSgpO1xyXG4gICAgLyogdHNsaW50OmVuYWJsZSAqL1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIEpTT04tZmlsZSBiYXNlZCBBREFMIHRva2VuIGNhY2hlLlxyXG4gKiBAcGFyYW0gZGlyIC0gQW4gb3B0aW9uYWwgZGlyZWN0b3J5IGZyb20gd2hpY2ggdGhlIGZpbGUgc2hvdWxkIGJlIGxvY2F0ZWQuXHJcbiAqICAgICAgICAgICAgICBJZiBvbWl0dGVkLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS5cclxuICogQHBhcmFtIGZpbGVuYW1lIC0gQW4gb3B0aW9uYWwgbmFtZSBvZiB0aGUgZmlsZSB0byBiZSB1c2VkLlxyXG4gKiAgICAgICAgICAgICAgICAgICBJZiBvbWl0dGVkLCBkZWZhdWx0cyB0byBcIi5hZGFsY2FjaGVcIi5cclxuICogQHBhcmFtIG5vUHJvYmUgLSBPcHRpb25hbGx5IGluZGljYXRlcyBpZiBubyBwcm9iaW5nIHNob3VsZCBvY2N1ciBmb3IgdGhlIGZpbGUuXHJcbiAqICAgICAgICAgICAgICAgICAgUHJvYmluZyAodGhlIGRlZmF1bHQpIHN0YXJ0cyBmcm9tIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5IGFuZFxyXG4gKiAgICAgICAgICAgICAgICAgIGxvb2tzIHRocm91Z2ggdGhlIHBhcmVudCBjaGFpbiBvZiBkaXJlY3RvcmllcyBmb3IgdGhlIGZpbGUsXHJcbiAqICAgICAgICAgICAgICAgICAgYW5kIHRoZW4gbG9va3MgaW4gdGhlIHVzZXIncyBob21lIGRpcmVjdG9yeS4gSWYgdGhlIGZpbGUgaXNcclxuICogICAgICAgICAgICAgICAgICBub3QgZm91bmQsIGl0IGNyZWF0ZXMgdGhlIGZpbGUgaW4gdGhlIHVzZXIncyBob21lIGRpcmVjdG9yeS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVKc29uRmlsZVRva2VuQ2FjaGUoZGlyPzogc3RyaW5nLCBmaWxlbmFtZT86IHN0cmluZywgbm9Qcm9iZT86IGJvb2xlYW4pOiBhZGFsLlRva2VuQ2FjaGUge1xyXG4gICAgLyogdHNsaW50OmRpc2FibGUgbm8tcmVxdWlyZS1pbXBvcnRzICovXHJcbiAgICByZXR1cm4gbmV3IChyZXF1aXJlKFwiLi90b2tlbi1jYWNoZS9qc29uRmlsZVwiKS5kZWZhdWx0KShkaXIsIGZpbGVuYW1lLCBub1Byb2JlKTtcclxuICAgIC8qIHRzbGludDplbmFibGUgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBKU09OLWZpbGUgYmFzZWQgQURBTCB0b2tlbiBjYWNoZSB0aGF0IHN0b3JlcyB0b2tlbnMgaW4gYSBuYXRpdmUga2V5Y2hhaW4uXHJcbiAqIEBwYXJhbSBmaWxlbmFtZSAtIEFuIG9wdGlvbmFsIG5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgdXNlZC5cclxuICogICAgICAgICAgICAgICAgICAgSWYgb21pdHRlZCwgZGVmYXVsdHMgdG8gXCIuYWRhbGNhY2hlXCIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSnNvbkZpbGVXaXRoTmF0aXZlVG9rZW5DYWNoZShmaWxlbmFtZT86IHN0cmluZyk6IGFkYWwuVG9rZW5DYWNoZSB7XHJcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZSBuby1yZXF1aXJlLWltcG9ydHMgKi9cclxuICAgIHJldHVybiBuZXcgKHJlcXVpcmUoXCIuL3Rva2VuLWNhY2hlL2pzb25GaWxlV2l0aE5hdGl2ZVwiKS5kZWZhdWx0KShmaWxlbmFtZSk7XHJcbiAgICAvKiB0c2xpbnQ6ZW5hYmxlICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgZnVuY3Rpb24gdGhhdCBpbXBsZW1lbnRzIHRoZSBpbnRlcmFjdGl2ZSBhc3BlY3Qgb2YgdGhlIGF1dGhvcml6YXRpb24gY29kZSBncmFudCBmbG93LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBdXRob3JpemF0aW9uQ29kZUNhbGxiYWNrIHtcclxuICAgIC8qKlxyXG4gICAgICogU2hvd3MgYSB3ZWIgYnJvd3NlciB0byBwZXJmb3JtIHRoZSBpbnRlcmFjdGl2ZSBhc3BlY3Qgb2YgdGhlIGF1dGhvcml6YXRpb24gY29kZSBncmFudCBmbG93LlxyXG4gICAgICogUmV0dXJucyB0aGUgY29tcGxldGUgVVJMIHJlZGlyZWN0ZWQgdG8gdGhhdCBtYXRjaGVzIHRoZSByZWRpcmVjdCBVUkkuXHJcbiAgICAgKiBAcGFyYW0gdXJsIC0gVGhlIGluaXRpYWwgYXV0aG9yaXphdGlvbiBVUkwgdG8gYnJvd3NlIHRvLlxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJpIC0gVGhlIHJlZGlyZWN0IFVSSSBmb3IgdGhlIHJlZ2lzdGVyZWQgYXBwbGljYXRpb24uXHJcbiAgICAgKiBAcGFyYW0gc2lsZW50IC0gT3B0aW9uYWxseSBpbmRpY2F0ZXMgaWYgdGhlIGJyb3dzZXIgd2luZG93IHNob3VsZCBub3QgYmUgc2hvd24uXHJcbiAgICAgKi9cclxuICAgICh1cmw6IHN0cmluZywgcmVkaXJlY3RVcmk6IHN0cmluZywgc2lsZW50PzogYm9vbGVhbik6IFByb21pc2U8c3RyaW5nPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgc2V0dGluZ3MgZm9yIGFuIEF6dXJlIEFjdGl2ZSBEaXJlY3RvcnkgYWNjb3VudCBwcm92aWRlciB0aGF0IHVzZXMgdGhlIGF1dGhvcml6YXRpb24gY29kZSBncmFudCBmbG93LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBdXRob3JpemF0aW9uQ29kZUdyYW50Rmxvd1NldHRpbmdzIGV4dGVuZHMgU2V0dGluZ3Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvcHRpb25hbCBzaXRlIElEIHRoYXQgYnJhbmRzIHRoZSBpbnRlcmFjdGl2ZSBhc3BlY3Qgb2Ygc2lnbiBpbi5cclxuICAgICAqL1xyXG4gICAgc2l0ZUlkPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVkaXJlY3QgVVJJIHRoYXQgaXMgdXNlZCB0byBzaWduaWZ5IHRoZSBlbmQgb2YgdGhlIGludGVyYWN0aXZlIGFzcGVjdCBvZiBzaWduIGluLlxyXG4gICAgICovXHJcbiAgICByZWRpcmVjdFVyaT86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IChwdWJsaWMpIGNsb3VkIGF1dGhvcml6YXRpb24gY29kZSBncmFudCBmbG93IHNldHRpbmdzLlxyXG4gKi9cclxuZXhwb3J0IGxldCBkZWZhdWx0QXV0aG9yaXphdGlvbkNvZGVHcmFudEZsb3dTZXR0aW5ncyA9IF8uZXh0ZW5kKHt9LCBkZWZhdWx0U2V0dGluZ3MsIHtcclxuICAgIHJlZGlyZWN0VXJpOiBcInVybjppZXRmOndnOm9hdXRoOjIuMDpvb2JcIlxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgQ2hpbmEgY2xvdWQgYXV0aG9yaXphdGlvbiBjb2RlIGdyYW50IGZsb3cgc2V0dGluZ3MuXHJcbiAqL1xyXG5leHBvcnQgbGV0IGNoaW5hQXV0aG9yaXphdGlvbkNvZGVHcmFudEZsb3dTZXR0aW5ncyA9IF8uZXh0ZW5kKHt9LCBjaGluYVNldHRpbmdzLCB7XHJcbiAgICByZWRpcmVjdFVyaTogXCJ1cm46aWV0Zjp3ZzpvYXV0aDoyLjA6b29iXCJcclxufSk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBhY2NvdW50IHByb3ZpZGVyIHRoYXQgdXNlcyB0aGUgYXV0aG9yaXphdGlvbiBjb2RlIGdyYW50IGZsb3cuXHJcbiAqIEBwYXJhbSBnZXRBdXRob3JpemF0aW9uQ29kZSAtIEEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyB0aGUgaW50ZXJhY3RpdmUgYXNwZWN0IG9mIHRoZSBmbG93LlxyXG4gKiBAcGFyYW0gc2V0dGluZ3MgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGZsb3cuXHJcbiAqIEBwYXJhbSB0b2tlbkNhY2hlIC0gQW4gb3B0aW9uYWwgdG9rZW4gY2FjaGUgdG8gdXNlLlxyXG4gKiAgICAgICAgICAgICAgICAgICAgIElmIG9taXR0ZWQsIGRlZmF1bHRzIHRvIGFuIGluLW1lbW9yeSB0b2tlbiBjYWNoZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdXRob3JpemF0aW9uQ29kZUdyYW50Rmxvd1Byb3ZpZGVyKFxyXG4gICAgZ2V0QXV0aG9yaXphdGlvbkNvZGU6IEF1dGhvcml6YXRpb25Db2RlQ2FsbGJhY2ssXHJcbiAgICBzZXR0aW5ncz86IEF1dGhvcml6YXRpb25Db2RlR3JhbnRGbG93U2V0dGluZ3MsXHJcbiAgICB0b2tlbkNhY2hlPzogYWRhbC5Ub2tlbkNhY2hlKTogcHJvdmlkZXJfYmFzZS5BY2NvdW50UHJvdmlkZXIge1xyXG4gICAgLyogdHNsaW50OmRpc2FibGUgbm8tcmVxdWlyZS1pbXBvcnRzICovXHJcbiAgICByZXR1cm4gbmV3IChyZXF1aXJlKFwiLi9mbG93L2F1dGhvcml6YXRpb25Db2RlR3JhbnRcIikuZGVmYXVsdCkoZ2V0QXV0aG9yaXphdGlvbkNvZGUsIHNldHRpbmdzLCB0b2tlbkNhY2hlKTtcclxuICAgIC8qIHRzbGludDplbmFibGUgKi9cclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
