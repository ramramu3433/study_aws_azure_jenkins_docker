/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
var adal = require("adal-node");
var q_1 = require("q");
var Q = require("q");
var URI = require("urijs");
var index = require("../index");
var provider_base_1 = require("../provider-base");
// Monkey patch the ADAL TokenRequest class to fix the fact that when you
// request a token from an authorization code, it doesn't update the cache.
// TODO: get this change pushed into the actual ADAL library for Node.
var TokenRequest = require("adal-node/lib/token-request");
var getTokenWithAuthorizationCodeOriginal = TokenRequest.prototype.getTokenWithAuthorizationCode;
TokenRequest.prototype.getTokenWithAuthorizationCode = function (authorizationCode, clientSecret, callback) {
    var _this = this;
    this._cacheDriver = this._createCacheDriver();
    getTokenWithAuthorizationCodeOriginal.call(this, authorizationCode, clientSecret, function (error, response) {
        if (error) {
            callback(error, response);
        }
        else {
            _this._userId = response.userId;
            _this._cacheDriver.add(response, function () { return callback(null, response); });
        }
    });
};
var Provider = (function (_super) {
    __extends(Provider, _super);
    function Provider(getAuthorizationCode, settings, tokenCache) {
        var _this = _super.call(this, _.extend({}, index.defaultAuthorizationCodeGrantFlowSettings, settings), tokenCache) || this;
        _this.getAuthorizationCode = getAuthorizationCode;
        return _this;
    }
    Provider.prototype.authenticate = function (tenantId, msa, userId, silent) {
        var _this = this;
        var authorityUrl = this.settings.host + "/" + tenantId, authorizeUrl = authorityUrl + "/oauth2/authorize" +
            // Specify the client ID, request the authorization code grant flow
            "?client_id=" + this.settings.clientId + "&response_type=code" +
            // Specify settings to optimize prompt given existing MSA or Org ID
            (userId ? (msa ? "&domain_hint=live.com" : "&msafed=0") : "") +
            // Specify settings to require login and/or provide existing user as a hint
            ((!userId || !silent) ? "&prompt=login" : "") +
            (userId ? ("&login_hint=" + encodeURIComponent(userId)) : "") +
            // The site ID can be used to brand the prompt in some form
            (this.settings.siteId ? ("&site_id=" + this.settings.siteId) : "") +
            // The display=popup setting causes a popup version of the UI to be shown
            "&display=popup" +
            // Not sure what the nux=1 setting does, but it was in the VS keychain
            "&nux=1" +
            // Specify the resource for which an access token should be retrieved
            "&resource=" + encodeURIComponent(this.settings.signInResourceId) +
            // TODO: add locale parameter like in VSAccountProvider.TryAppendLocalParameter
            "&redirect_uri=" + encodeURIComponent(this.settings.redirectUri);
        // Get the authorization code. If this is the initial authentication
        // (the user is unknown), do not silently prompt. If this is a subsequent
        // authentication for an additional tenant, the browser cookie cache will
        // be used to authenticate without prompting, so run the browser silently.
        return this.getAuthorizationCode(authorizeUrl, this.settings.redirectUri, silent).then(function (capturedUrl) {
            if (!capturedUrl) {
                return Q.reject(new Error("Operation was canceled."));
            }
            var query = URI.parseQuery(URI.parse(capturedUrl).query), code = query.code;
            if (!code) {
                return Q.reject(new Error(query.error + ": " + query.error_description));
            }
            return q_1.Promise(function (resolve, reject) {
                var context = new adal.AuthenticationContext(authorityUrl, null, _this.tokenCache);
                context.acquireTokenWithAuthorizationCode(code, _this.settings.redirectUri, _this.settings.signInResourceId, _this.settings.clientId, null, function (error, response) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(response);
                    }
                });
            });
        });
    };
    return Provider;
}(provider_base_1.default));
exports.default = Provider;

//# sourceMappingURL=data:application/json;base64,
