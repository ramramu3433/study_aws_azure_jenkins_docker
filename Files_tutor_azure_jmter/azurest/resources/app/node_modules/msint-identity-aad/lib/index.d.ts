/// <reference types="q" />
/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
import * as adal from "adal-node";
import { Promise } from "q";
import * as identity from "msint-identity";
import * as provider_base from "./provider-base";
/**
 * The identifier of the Azure Active Directory account provider.
 */
export declare let id: string;
/**
 * Represents a tenant (an Azure Active Directory instance) to which a user has access.
 */
export interface Tenant {
    /**
     * The globally unique identifier of the tenant.
     */
    id: string;
    /**
     * The display name of the tenant.
     */
    displayName: string;
    /**
     * The identifier of the user in the tenant.
     */
    userId: string;
}
/**
 * Represents a resource exposed by an Azure Active Directory.
 */
export interface Resource {
    /**
     * The identifier of the resource.
     */
    id: string;
    /**
     * The endpoint used to access the resource.
     */
    endpoint: string;
}
/**
 * Represents the arguments that identify an instantiation of the Azure Active Directory account provider.
 */
export interface Arguments {
    /**
     * The host of the authority.
     */
    host: string;
    /**
     * The identifier of the client application.
     */
    clientId: string;
}
/**
 * Represents settings for an Azure Active Directory account provider.
 */
export interface Settings {
    /**
     * The host of the authority.
     */
    host?: string;
    /**
     * The identifier of the client application.
     */
    clientId?: string;
    /**
     * The identifier of the resource to request when signing in.
     */
    signInResourceId?: string;
    /**
     * Information that describes the Azure Active Directory Graph resource.
     */
    graphResource?: Resource;
    /**
     * Information that describes the Azure Resource Management resource.
     */
    armResource?: Resource;
    /**
     * A list of tenant ids to authenticate against. If defined, then these ids
     * will be used instead of querying the tenants endpoint of the armResource.
     */
    adTenants?: string[];
}
/**
 * Represents the Azure Active Directory account provider.
 */
export interface AccountProvider extends identity.AccountProvider {
    /**
     * Arguments that identify an instantiation of the provider.
     */
    args: Arguments;
    /**
     * Gets the provider settings.
     */
    getSettings(): Promise<Settings>;
    /**
     * Indicates if an account represents a Microsoft account.
     * @param account - An account.
     */
    isMicrosoftAccount(account: identity.Account): Promise<boolean>;
    /**
     * Gets the home tenant for an account.
     * @param account - An account.
     */
    getHomeTenant(account: identity.Account): Promise<Tenant>;
    /**
     * Gets an array of all the tenants for an account.
     * @param account - An account.
     */
    getAllTenants(account: identity.Account): Promise<Tenant[]>;
    /**
     * Tries to acquire a token for an account to a resource in a tenant.
     * @param account - An account.
     * @param tenantId - The identifier of a tenant.
     * @param resourceId - The identifier of a resource.
     */
    tryAcquireToken(account: identity.Account, tenantId: string, resourceId: string): Promise<string>;
}
/**
 * Gets a string representation of a key for an account created by an Azure Active Directory account provider.
 * @param key - The key of an account.
 */
export declare function accountKeyToString(key: identity.AccountKey): string;
/**
 * Gets the key for an account created by an Azure Active Directory account provider from a previously produced string.
 * @param s - A string previously produced from an account key.
 */
export declare function stringToAccountKey(s: string): identity.AccountKey;
/**
 * The default (public) cloud settings.
 */
export declare let defaultSettings: Settings;
/**
 * The China cloud settings.
 */
export declare let chinaSettings: Settings;
/**
 * Creates an in-memory ADAL token cache.
 */
export declare function createInMemoryTokenCache(): adal.TokenCache;
/**
 * Creates a JSON-file based ADAL token cache.
 * @param dir - An optional directory from which the file should be located.
 *              If omitted, defaults to the current working directory.
 * @param filename - An optional name of the file to be used.
 *                   If omitted, defaults to ".adalcache".
 * @param noProbe - Optionally indicates if no probing should occur for the file.
 *                  Probing (the default) starts from the specified directory and
 *                  looks through the parent chain of directories for the file,
 *                  and then looks in the user's home directory. If the file is
 *                  not found, it creates the file in the user's home directory.
 */
export declare function createJsonFileTokenCache(dir?: string, filename?: string, noProbe?: boolean): adal.TokenCache;
/**
 * Creates a JSON-file based ADAL token cache that stores tokens in a native keychain.
 * @param filename - An optional name of the file to be used.
 *                   If omitted, defaults to ".adalcache".
 */
export declare function createJsonFileWithNativeTokenCache(filename?: string): adal.TokenCache;
/**
 * Represents a function that implements the interactive aspect of the authorization code grant flow.
 */
export interface AuthorizationCodeCallback {
    /**
     * Shows a web browser to perform the interactive aspect of the authorization code grant flow.
     * Returns the complete URL redirected to that matches the redirect URI.
     * @param url - The initial authorization URL to browse to.
     * @param redirectUri - The redirect URI for the registered application.
     * @param silent - Optionally indicates if the browser window should not be shown.
     */
    (url: string, redirectUri: string, silent?: boolean): Promise<string>;
}
/**
 * Represents settings for an Azure Active Directory account provider that uses the authorization code grant flow.
 */
export interface AuthorizationCodeGrantFlowSettings extends Settings {
    /**
     * An optional site ID that brands the interactive aspect of sign in.
     */
    siteId?: string;
    /**
     * The redirect URI that is used to signify the end of the interactive aspect of sign in.
     */
    redirectUri?: string;
}
/**
 * The default (public) cloud authorization code grant flow settings.
 */
export declare let defaultAuthorizationCodeGrantFlowSettings: any;
/**
 * The China cloud authorization code grant flow settings.
 */
export declare let chinaAuthorizationCodeGrantFlowSettings: any;
/**
 * Creates a new instance of the Azure Active Directory account provider that uses the authorization code grant flow.
 * @param getAuthorizationCode - A function that provides the interactive aspect of the flow.
 * @param settings - Optional settings for the flow.
 * @param tokenCache - An optional token cache to use.
 *                     If omitted, defaults to an in-memory token cache.
 */
export declare function createAuthorizationCodeGrantFlowProvider(getAuthorizationCode: AuthorizationCodeCallback, settings?: AuthorizationCodeGrantFlowSettings, tokenCache?: adal.TokenCache): provider_base.AccountProvider;
