/// <reference types="node" />
/// <reference types="q" />
/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
import * as adal from "adal-node";
import { EventEmitter } from "events";
import { Promise } from "q";
import * as identity from "msint-identity";
import * as manager from "msint-identity/lib/manager";
import * as index from "./index";
export interface AccountProvider extends index.AccountProvider, manager.AccountProvider {
    args: any;
}
declare abstract class ProviderBase<TSettings extends index.Settings> extends EventEmitter implements index.AccountProvider, manager.AccountProvider {
    id: string;
    args: index.Arguments;
    settings: TSettings;
    protected tokenCache: adal.TokenCache;
    constructor(settings: TSettings, tokenCache?: adal.TokenCache);
    protected abstract authenticate(tenantId: string, msa: boolean, userId: string, silent: boolean): Promise<adal.TokenResponse>;
    private getTenantIds(userId);
    private getTenantDisplayName(tenantId, userId);
    private getTenants(msa, userId, tenantIds);
    private signIn(msa?, userId?);
    getSettings(): Promise<TSettings>;
    prompt(): Promise<identity.Account>;
    refresh(account: identity.Account): Promise<identity.Account>;
    clear(account: identity.Account): Promise<void>;
    isMicrosoftAccount(account: identity.Account): Promise<boolean>;
    getHomeTenant(account: identity.Account): Promise<index.Tenant>;
    getAllTenants(account: identity.Account): Promise<index.Tenant[]>;
    tryAcquireToken(account: identity.Account, tenantId: string, resourceId: string): Promise<string>;
    listeners(event: "stale"): manager.AccountStaleListener[];
}
export default ProviderBase;
