/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
var keytar = require("keytar");
var crypto = require("crypto");
var core = require("./core");
var jsonFile_1 = require("./jsonFile");
function getServiceKey(entry) {
    return entry._authority;
}
function getAccountKey(entry) {
    return entry.userId +
        "?clientId=" + entry._clientId +
        "&resource=" + entry.resource;
}
function getTokenPasswordKey(entry) {
    return getAccountKey(entry) + "&pwd=1";
}
function generateRandomBase64String(length) {
    return crypto.randomBytes(Math.ceil(3 / 4 * length)).toString("base64");
}
function encryptText(text, password) {
    if (!text) {
        return "";
    }
    var cipher = crypto.createCipher("aes-256-cbc", password);
    var crypted = cipher.update(text, "utf8", "base64");
    crypted += cipher.final("base64");
    return crypted;
}
function decryptText(text, password) {
    if (!text) {
        return "";
    }
    var decipher = crypto.createDecipher("aes-256-cbc", password);
    var decrypted = decipher.update(text, "base64", "utf8");
    decrypted += decipher.final("utf8");
    return decrypted;
}
var loadAndIncludeTokens, extractAndSaveTokens, deleteTokens;
loadAndIncludeTokens = function (entry) {
    var entryWithEncryption = entry;
    var password = keytar.getPassword(getServiceKey(entry), getTokenPasswordKey(entry));
    if (password && entryWithEncryption.encryptedRefreshToken && entryWithEncryption.encryptedAccessToken) {
        // First attempt the new encryption method which uses a securely stored (keytar) password to encrypt/decrypt the tokens.
        try {
            entry = _.extend(entry, {
                refreshToken: decryptText(entryWithEncryption.encryptedRefreshToken, password),
                accessToken: decryptText(entryWithEncryption.encryptedAccessToken, password)
            });
            entry = _.omit(entry, ["encryptedRefreshToken", "encryptedAccessToken"]);
        }
        catch (e) {
            // Failed to decrypt token value.
        }
    }
    else {
        // If no password and encrypted token properties found, fallback to the old way...
        // So data written by older versions of this module can still be read, and users don't have to re-enter credentials
        // for all accounts after upgrading to the new version of the module. Once the entries are written back to the cache,
        // it will always be in the new encryption format.
        var tokens = keytar.getPassword(getServiceKey(entry), getAccountKey(entry));
        if (tokens) {
            try {
                entry = _.extend(entry, JSON.parse(tokens));
            }
            catch (e) {
                // Tokens were not valid JSON
            }
        }
    }
    if (!entry.refreshToken || !entry.accessToken) {
        return null;
    }
    return entry;
};
extractAndSaveTokens = function (entry) {
    var password = keytar.getPassword(getServiceKey(entry), getTokenPasswordKey(entry));
    if (!password) {
        password = generateRandomBase64String(128);
        keytar.replacePassword(getServiceKey(entry), getTokenPasswordKey(entry), password);
    }
    var encryptedTokens = {
        encryptedRefreshToken: encryptText(entry.refreshToken, password),
        encryptedAccessToken: encryptText(entry.accessToken, password)
    };
    entry = _.omit(entry, ["refreshToken", "accessToken"]);
    entry = _.extend(entry, encryptedTokens);
    return entry;
};
deleteTokens = function (entry) {
    keytar.deletePassword(getServiceKey(entry), getTokenPasswordKey(entry));
};
var JsonFileWithNativeTokenCache = (function (_super) {
    __extends(JsonFileWithNativeTokenCache, _super);
    function JsonFileWithNativeTokenCache(filename) {
        // Since there is one native keychain per user (at least as implemented
        // by keytar), the file storing the other information should have the
        // same multiplicity, i.e. a single file in the user's home directory.
        return _super.call(this, null, filename || ".adalcache", true) || this;
    }
    JsonFileWithNativeTokenCache.prototype.findInCache = function (cache, query) {
        // Find entries from the cache
        var entries = core.find(cache, query);
        // Include the tokens for matching results
        entries = entries.map(loadAndIncludeTokens);
        // Remove any entries that were missing tokens
        entries = _.compact(entries);
        return entries;
    };
    JsonFileWithNativeTokenCache.prototype.addToCache = function (cache, entries) {
        // Extract and save tokens for the new entries
        entries = entries.map(extractAndSaveTokens);
        // Merge the new entries with the cache
        cache = core.add(cache, entries);
        return cache;
    };
    JsonFileWithNativeTokenCache.prototype.removeFromCache = function (cache, entries) {
        // Delete tokens for the specified entries
        entries.map(deleteTokens);
        // Remove the entries from the cache
        cache = core.remove(cache, entries);
        return cache;
    };
    return JsonFileWithNativeTokenCache;
}(jsonFile_1.default));
exports.default = JsonFileWithNativeTokenCache;

//# sourceMappingURL=data:application/json;base64,
