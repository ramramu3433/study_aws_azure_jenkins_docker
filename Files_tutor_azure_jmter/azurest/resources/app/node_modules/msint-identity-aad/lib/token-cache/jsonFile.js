/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *----------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var q_1 = require("q");
var Q = require("q");
var util_1 = require("msint-identity/lib/util");
var core = require("./core");
var JsonFileTokenCache = (function () {
    function JsonFileTokenCache(dir, filename, noProbe) {
        this.filename = util_1.createIfNotExists(filename || ".adalcache", dir, noProbe);
    }
    JsonFileTokenCache.prototype.doOperation = function (op) {
        var _this = this;
        var activeOperation = this.activeOperation || Q.resolve(null);
        activeOperation = activeOperation.then(op).fin(function () {
            if (_this.activeOperation === activeOperation) {
                _this.activeOperation = null;
            }
        });
        return this.activeOperation = activeOperation;
    };
    JsonFileTokenCache.prototype.readCache = function () {
        var _this = this;
        return q_1.Promise(function (resolve) {
            fs.readFile(_this.filename, "utf8", function (err, data) {
                var cache;
                if (err) {
                    // Disregard read errors
                    data = "";
                }
                try {
                    // Parse the data
                    cache = JSON.parse(data || "[]");
                }
                catch (e) {
                    // Disregard invalid JSON
                    cache = [];
                }
                // Disregard if unexpected data
                if (!Array.isArray(cache)) {
                    cache = [];
                }
                // Fix up fields that require special formatting
                cache.forEach(function (entry) {
                    entry.expiresOn = new Date(entry.expiresOn);
                });
                resolve(cache);
            });
        });
    };
    JsonFileTokenCache.prototype.findInCache = function (cache, query) {
        return core.find(cache, query);
    };
    JsonFileTokenCache.prototype.find = function (query, callback) {
        var _this = this;
        this.doOperation(function () { return _this.readCache()
            .then(function (cache) { return _this.findInCache(cache, query); })
            .then(function (results) { return callback(null, results); }); });
    };
    JsonFileTokenCache.prototype.writeCache = function (cache) {
        var _this = this;
        return q_1.Promise(function (resolve) {
            fs.writeFile(_this.filename, JSON.stringify(cache, null, 4), function () { return resolve(null); });
        });
    };
    JsonFileTokenCache.prototype.addToCache = function (cache, entries) {
        return core.add(cache, entries);
    };
    JsonFileTokenCache.prototype.add = function (entries, callback) {
        var _this = this;
        this.doOperation(function () { return _this.readCache()
            .then(function (cache) { return _this.addToCache(cache, entries); })
            .then(function (updatedCache) { return _this.writeCache(updatedCache); })
            .then(function () { return callback(null); }); });
    };
    JsonFileTokenCache.prototype.removeFromCache = function (cache, entries) {
        return core.remove(cache, entries);
    };
    JsonFileTokenCache.prototype.remove = function (entries, callback) {
        var _this = this;
        this.doOperation(function () { return _this.readCache()
            .then(function (cache) { return _this.removeFromCache(cache, entries); })
            .then(function (updatedCache) { return _this.writeCache(updatedCache); })
            .then(function () { return callback(null); }); });
    };
    return JsonFileTokenCache;
}());
exports.default = JsonFileTokenCache;

//# sourceMappingURL=data:application/json;base64,
